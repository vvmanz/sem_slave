
sem_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001fb0  08001fb0  00011fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fd0  08001fd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fd0  08001fd0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fd0  08001fd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fd0  08001fd0  00011fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fd4  08001fd4  00011fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08001fe4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08001fe4  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006558  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000166f  00000000  00000000  0002658d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00027c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  000282e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016887  00000000  00000000  00028908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c7f  00000000  00000000  0003f18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080aa8  00000000  00000000  00046e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c78b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a6c  00000000  00000000  000c7908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f98 	.word	0x08001f98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001f98 	.word	0x08001f98

0800014c <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SPI_NSS_2_Pin) {
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800015c:	d11b      	bne.n	8000196 <HAL_GPIO_EXTI_Callback+0x4a>
		if (HAL_GPIO_ReadPin(SPI_NSS_2_GPIO_Port, SPI_NSS_2_Pin)
 800015e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000162:	480f      	ldr	r0, [pc, #60]	; (80001a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000164:	f000 fde2 	bl	8000d2c <HAL_GPIO_ReadPin>
 8000168:	4603      	mov	r3, r0
 800016a:	2b01      	cmp	r3, #1
 800016c:	d108      	bne.n	8000180 <HAL_GPIO_EXTI_Callback+0x34>
				== GPIO_PIN_SET) {
			flag_nss = 0;
 800016e:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000170:	2200      	movs	r2, #0
 8000172:	601a      	str	r2, [r3, #0]
			HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t*) slave_transmit,
 8000174:	2318      	movs	r3, #24
 8000176:	4a0c      	ldr	r2, [pc, #48]	; (80001a8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000178:	490c      	ldr	r1, [pc, #48]	; (80001ac <HAL_GPIO_EXTI_Callback+0x60>)
 800017a:	480d      	ldr	r0, [pc, #52]	; (80001b0 <HAL_GPIO_EXTI_Callback+0x64>)
 800017c:	f001 fa92 	bl	80016a4 <HAL_SPI_TransmitReceive_IT>
					(uint8_t*) slave_receive, 24);
		}
		if (HAL_GPIO_ReadPin(SPI_NSS_2_GPIO_Port, SPI_NSS_2_Pin)
 8000180:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000186:	f000 fdd1 	bl	8000d2c <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	2b00      	cmp	r3, #0
 800018e:	d102      	bne.n	8000196 <HAL_GPIO_EXTI_Callback+0x4a>
				== GPIO_PIN_RESET) {
			flag_nss = 1;
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000192:	2201      	movs	r2, #1
 8000194:	601a      	str	r2, [r3, #0]
//			HAL_SPI_Abort(&hspi2);
		}
	}
}
 8000196:	bf00      	nop
 8000198:	3708      	adds	r7, #8
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00
 80001a4:	200000b8 	.word	0x200000b8
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	20000088 	.word	0x20000088
 80001b0:	20000030 	.word	0x20000030

080001b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001b8:	f000 fa32 	bl	8000620 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001bc:	f000 f822 	bl	8000204 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001c0:	f000 f8ae 	bl	8000320 <MX_GPIO_Init>
	MX_CRC_Init();
 80001c4:	f000 f864 	bl	8000290 <MX_CRC_Init>
	MX_SPI2_Init();
 80001c8:	f000 f876 	bl	80002b8 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	slave_transmit[0] = 0xAAAAAAAA;
 80001cc:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <main+0x4c>)
 80001ce:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80001d2:	601a      	str	r2, [r3, #0]
	slave_transmit[1] = 0xBBBBBBBB;
 80001d4:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <main+0x4c>)
 80001d6:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 80001da:	605a      	str	r2, [r3, #4]
	slave_transmit[2] = 0xCCCCCCCC;
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <main+0x4c>)
 80001de:	f04f 32cc 	mov.w	r2, #3435973836	; 0xcccccccc
 80001e2:	609a      	str	r2, [r3, #8]
	slave_transmit[3] = 0xDDDDDDDD;
 80001e4:	4b06      	ldr	r3, [pc, #24]	; (8000200 <main+0x4c>)
 80001e6:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 80001ea:	60da      	str	r2, [r3, #12]
	slave_transmit[4] = 0xEEEEEEEE;
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <main+0x4c>)
 80001ee:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 80001f2:	611a      	str	r2, [r3, #16]
	slave_transmit[5] = 0xFFFFFFFF;
 80001f4:	4b02      	ldr	r3, [pc, #8]	; (8000200 <main+0x4c>)
 80001f6:	f04f 32ff 	mov.w	r2, #4294967295
 80001fa:	615a      	str	r2, [r3, #20]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80001fc:	e7fe      	b.n	80001fc <main+0x48>
 80001fe:	bf00      	nop
 8000200:	20000088 	.word	0x20000088

08000204 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b090      	sub	sp, #64	; 0x40
 8000208:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800020a:	f107 0318 	add.w	r3, r7, #24
 800020e:	2228      	movs	r2, #40	; 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 feb8 	bl	8001f88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000226:	2301      	movs	r3, #1
 8000228:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800022e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000234:	2301      	movs	r3, #1
 8000236:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000238:	2302      	movs	r3, #2
 800023a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000242:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000246:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000248:	f107 0318 	add.w	r3, r7, #24
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fdb5 	bl	8000dbc <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x58>
		Error_Handler();
 8000258:	f000 f8d2 	bl	8000400 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000260:	2302      	movs	r3, #2
 8000262:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2102      	movs	r1, #2
 8000276:	4618      	mov	r0, r3
 8000278:	f001 f822 	bl	80012c0 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x82>
		Error_Handler();
 8000282:	f000 f8bd 	bl	8000400 <Error_Handler>
	}
}
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	; 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <MX_CRC_Init+0x20>)
 8000296:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <MX_CRC_Init+0x24>)
 8000298:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800029a:	4805      	ldr	r0, [pc, #20]	; (80002b0 <MX_CRC_Init+0x20>)
 800029c:	f000 fb2f 	bl	80008fe <HAL_CRC_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_CRC_Init+0x1a>
		Error_Handler();
 80002a6:	f000 f8ab 	bl	8000400 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000028 	.word	0x20000028
 80002b4:	40023000 	.word	0x40023000

080002b8 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <MX_SPI2_Init+0x60>)
 80002be:	4a17      	ldr	r2, [pc, #92]	; (800031c <MX_SPI2_Init+0x64>)
 80002c0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 80002c2:	4b15      	ldr	r3, [pc, #84]	; (8000318 <MX_SPI2_Init+0x60>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002c8:	4b13      	ldr	r3, [pc, #76]	; (8000318 <MX_SPI2_Init+0x60>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <MX_SPI2_Init+0x60>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002d4:	4b10      	ldr	r3, [pc, #64]	; (8000318 <MX_SPI2_Init+0x60>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <MX_SPI2_Init+0x60>)
 80002dc:	2200      	movs	r2, #0
 80002de:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <MX_SPI2_Init+0x60>)
 80002e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002e6:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002e8:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <MX_SPI2_Init+0x60>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002ee:	4b0a      	ldr	r3, [pc, #40]	; (8000318 <MX_SPI2_Init+0x60>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80002f4:	4b08      	ldr	r3, [pc, #32]	; (8000318 <MX_SPI2_Init+0x60>)
 80002f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002fa:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <MX_SPI2_Init+0x60>)
 80002fe:	220a      	movs	r2, #10
 8000300:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <MX_SPI2_Init+0x60>)
 8000304:	f001 f942 	bl	800158c <HAL_SPI_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_SPI2_Init+0x5a>
		Error_Handler();
 800030e:	f000 f877 	bl	8000400 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000030 	.word	0x20000030
 800031c:	40003800 	.word	0x40003800

08000320 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000334:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <MX_GPIO_Init+0xd0>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a2d      	ldr	r2, [pc, #180]	; (80003f0 <MX_GPIO_Init+0xd0>)
 800033a:	f043 0310 	orr.w	r3, r3, #16
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b2b      	ldr	r3, [pc, #172]	; (80003f0 <MX_GPIO_Init+0xd0>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0310 	and.w	r3, r3, #16
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800034c:	4b28      	ldr	r3, [pc, #160]	; (80003f0 <MX_GPIO_Init+0xd0>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a27      	ldr	r2, [pc, #156]	; (80003f0 <MX_GPIO_Init+0xd0>)
 8000352:	f043 0320 	orr.w	r3, r3, #32
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b25      	ldr	r3, [pc, #148]	; (80003f0 <MX_GPIO_Init+0xd0>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0320 	and.w	r3, r3, #32
 8000360:	60bb      	str	r3, [r7, #8]
 8000362:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000364:	4b22      	ldr	r3, [pc, #136]	; (80003f0 <MX_GPIO_Init+0xd0>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <MX_GPIO_Init+0xd0>)
 800036a:	f043 0308 	orr.w	r3, r3, #8
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <MX_GPIO_Init+0xd0>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0308 	and.w	r3, r3, #8
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <MX_GPIO_Init+0xd0>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a1b      	ldr	r2, [pc, #108]	; (80003f0 <MX_GPIO_Init+0xd0>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <MX_GPIO_Init+0xd0>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	603b      	str	r3, [r7, #0]
 8000392:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039a:	4816      	ldr	r0, [pc, #88]	; (80003f4 <MX_GPIO_Init+0xd4>)
 800039c:	f000 fcdd 	bl	8000d5a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD_Pin */
	GPIO_InitStruct.Pin = LD_Pin;
 80003a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	480e      	ldr	r0, [pc, #56]	; (80003f4 <MX_GPIO_Init+0xd4>)
 80003ba:	f000 fb33 	bl	8000a24 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_NSS_2_Pin */
	GPIO_InitStruct.Pin = SPI_NSS_2_Pin;
 80003be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_GPIO_Init+0xd8>)
 80003c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI_NSS_2_GPIO_Port, &GPIO_InitStruct);
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	4619      	mov	r1, r3
 80003d2:	480a      	ldr	r0, [pc, #40]	; (80003fc <MX_GPIO_Init+0xdc>)
 80003d4:	f000 fb26 	bl	8000a24 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003d8:	2200      	movs	r2, #0
 80003da:	2100      	movs	r1, #0
 80003dc:	2028      	movs	r0, #40	; 0x28
 80003de:	f000 fa58 	bl	8000892 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003e2:	2028      	movs	r0, #40	; 0x28
 80003e4:	f000 fa71 	bl	80008ca <HAL_NVIC_EnableIRQ>

}
 80003e8:	bf00      	nop
 80003ea:	3720      	adds	r7, #32
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40011000 	.word	0x40011000
 80003f8:	10310000 	.word	0x10310000
 80003fc:	40010c00 	.word	0x40010c00

08000400 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000408:	e7fe      	b.n	8000408 <Error_Handler+0x8>
	...

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <HAL_MspInit+0x5c>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4a14      	ldr	r2, [pc, #80]	; (8000468 <HAL_MspInit+0x5c>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6193      	str	r3, [r2, #24]
 800041e:	4b12      	ldr	r3, [pc, #72]	; (8000468 <HAL_MspInit+0x5c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <HAL_MspInit+0x5c>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <HAL_MspInit+0x5c>)
 8000430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000434:	61d3      	str	r3, [r2, #28]
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <HAL_MspInit+0x5c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <HAL_MspInit+0x60>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <HAL_MspInit+0x60>)
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40021000 	.word	0x40021000
 800046c:	40010000 	.word	0x40010000

08000470 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a09      	ldr	r2, [pc, #36]	; (80004a4 <HAL_CRC_MspInit+0x34>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d10b      	bne.n	800049a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <HAL_CRC_MspInit+0x38>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a08      	ldr	r2, [pc, #32]	; (80004a8 <HAL_CRC_MspInit+0x38>)
 8000488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <HAL_CRC_MspInit+0x38>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40023000 	.word	0x40023000
 80004a8:	40021000 	.word	0x40021000

080004ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a20      	ldr	r2, [pc, #128]	; (8000548 <HAL_SPI_MspInit+0x9c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d139      	bne.n	8000540 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004cc:	4b1f      	ldr	r3, [pc, #124]	; (800054c <HAL_SPI_MspInit+0xa0>)
 80004ce:	69db      	ldr	r3, [r3, #28]
 80004d0:	4a1e      	ldr	r2, [pc, #120]	; (800054c <HAL_SPI_MspInit+0xa0>)
 80004d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d6:	61d3      	str	r3, [r2, #28]
 80004d8:	4b1c      	ldr	r3, [pc, #112]	; (800054c <HAL_SPI_MspInit+0xa0>)
 80004da:	69db      	ldr	r3, [r3, #28]
 80004dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e4:	4b19      	ldr	r3, [pc, #100]	; (800054c <HAL_SPI_MspInit+0xa0>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a18      	ldr	r2, [pc, #96]	; (800054c <HAL_SPI_MspInit+0xa0>)
 80004ea:	f043 0308 	orr.w	r3, r3, #8
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <HAL_SPI_MspInit+0xa0>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0308 	and.w	r3, r3, #8
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80004fc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	480f      	ldr	r0, [pc, #60]	; (8000550 <HAL_SPI_MspInit+0xa4>)
 8000512:	f000 fa87 	bl	8000a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000516:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800051a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051c:	2302      	movs	r3, #2
 800051e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000520:	2303      	movs	r3, #3
 8000522:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4809      	ldr	r0, [pc, #36]	; (8000550 <HAL_SPI_MspInit+0xa4>)
 800052c:	f000 fa7a 	bl	8000a24 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2100      	movs	r1, #0
 8000534:	2024      	movs	r0, #36	; 0x24
 8000536:	f000 f9ac 	bl	8000892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800053a:	2024      	movs	r0, #36	; 0x24
 800053c:	f000 f9c5 	bl	80008ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40003800 	.word	0x40003800
 800054c:	40021000 	.word	0x40021000
 8000550:	40010c00 	.word	0x40010c00

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <NMI_Handler+0x4>

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <MemManage_Handler+0x4>

08000566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <UsageFault_Handler+0x4>

08000572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059a:	f000 f887 	bl	80006ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <SPI2_IRQHandler+0x10>)
 80005aa:	f001 f923 	bl	80017f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000030 	.word	0x20000030

080005b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI_NSS_2_Pin);
 80005bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80005c0:	f000 fbe4 	bl	8000d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d4:	480c      	ldr	r0, [pc, #48]	; (8000608 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005d6:	490d      	ldr	r1, [pc, #52]	; (800060c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005d8:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005dc:	e002      	b.n	80005e4 <LoopCopyDataInit>

080005de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e2:	3304      	adds	r3, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e8:	d3f9      	bcc.n	80005de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005ec:	4c0a      	ldr	r4, [pc, #40]	; (8000618 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f0:	e001      	b.n	80005f6 <LoopFillZerobss>

080005f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f4:	3204      	adds	r2, #4

080005f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f8:	d3fb      	bcc.n	80005f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005fa:	f7ff ffe5 	bl	80005c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005fe:	f001 fc9f 	bl	8001f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000602:	f7ff fdd7 	bl	80001b4 <main>
  bx lr
 8000606:	4770      	bx	lr
  ldr r0, =_sdata
 8000608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800060c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000610:	08001fd8 	.word	0x08001fd8
  ldr r2, =_sbss
 8000614:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000618:	200000c0 	.word	0x200000c0

0800061c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC1_2_IRQHandler>
	...

08000620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <HAL_Init+0x28>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_Init+0x28>)
 800062a:	f043 0310 	orr.w	r3, r3, #16
 800062e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000630:	2003      	movs	r0, #3
 8000632:	f000 f923 	bl	800087c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000636:	200f      	movs	r0, #15
 8000638:	f000 f808 	bl	800064c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800063c:	f7ff fee6 	bl	800040c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40022000 	.word	0x40022000

0800064c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_InitTick+0x54>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_InitTick+0x58>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	4619      	mov	r1, r3
 800065e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000662:	fbb3 f3f1 	udiv	r3, r3, r1
 8000666:	fbb2 f3f3 	udiv	r3, r2, r3
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f93b 	bl	80008e6 <HAL_SYSTICK_Config>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	e00e      	b.n	8000698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b0f      	cmp	r3, #15
 800067e:	d80a      	bhi.n	8000696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000680:	2200      	movs	r2, #0
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	f04f 30ff 	mov.w	r0, #4294967295
 8000688:	f000 f903 	bl	8000892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <HAL_InitTick+0x5c>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000692:	2300      	movs	r3, #0
 8000694:	e000      	b.n	8000698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000008 	.word	0x20000008
 80006a8:	20000004 	.word	0x20000004

080006ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_IncTick+0x1c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <HAL_IncTick+0x20>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <HAL_IncTick+0x20>)
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	20000008 	.word	0x20000008
 80006cc:	200000bc 	.word	0x200000bc

080006d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return uwTick;
 80006d4:	4b02      	ldr	r3, [pc, #8]	; (80006e0 <HAL_GetTick+0x10>)
 80006d6:	681b      	ldr	r3, [r3, #0]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	200000bc 	.word	0x200000bc

080006e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800070c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000716:	4a04      	ldr	r2, [pc, #16]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	60d3      	str	r3, [r2, #12]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <__NVIC_GetPriorityGrouping+0x18>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	f003 0307 	and.w	r3, r3, #7
}
 800073a:	4618      	mov	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	db0b      	blt.n	8000772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f003 021f 	and.w	r2, r3, #31
 8000760:	4906      	ldr	r1, [pc, #24]	; (800077c <__NVIC_EnableIRQ+0x34>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	095b      	lsrs	r3, r3, #5
 8000768:	2001      	movs	r0, #1
 800076a:	fa00 f202 	lsl.w	r2, r0, r2
 800076e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	e000e100 	.word	0xe000e100

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000848:	d301      	bcc.n	800084e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084a:	2301      	movs	r3, #1
 800084c:	e00f      	b.n	800086e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <SysTick_Config+0x40>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000856:	210f      	movs	r1, #15
 8000858:	f04f 30ff 	mov.w	r0, #4294967295
 800085c:	f7ff ff90 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <SysTick_Config+0x40>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <SysTick_Config+0x40>)
 8000868:	2207      	movs	r2, #7
 800086a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	e000e010 	.word	0xe000e010

0800087c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ff2d 	bl	80006e4 <__NVIC_SetPriorityGrouping>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a4:	f7ff ff42 	bl	800072c <__NVIC_GetPriorityGrouping>
 80008a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	6978      	ldr	r0, [r7, #20]
 80008b0:	f7ff ff90 	bl	80007d4 <NVIC_EncodePriority>
 80008b4:	4602      	mov	r2, r0
 80008b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff5f 	bl	8000780 <__NVIC_SetPriority>
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff35 	bl	8000748 <__NVIC_EnableIRQ>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ffa2 	bl	8000838 <SysTick_Config>
 80008f4:	4603      	mov	r3, r0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d101      	bne.n	8000910 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	e00e      	b.n	800092e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	795b      	ldrb	r3, [r3, #5]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d105      	bne.n	8000926 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff fda5 	bl	8000470 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2201      	movs	r2, #1
 800092a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800094a:	2b02      	cmp	r3, #2
 800094c:	d005      	beq.n	800095a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2204      	movs	r2, #4
 8000952:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	73fb      	strb	r3, [r7, #15]
 8000958:	e051      	b.n	80009fe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f022 020e 	bic.w	r2, r2, #14
 8000968:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f022 0201 	bic.w	r2, r2, #1
 8000978:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <HAL_DMA_Abort_IT+0xd0>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d029      	beq.n	80009d8 <HAL_DMA_Abort_IT+0xa0>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a20      	ldr	r2, [pc, #128]	; (8000a0c <HAL_DMA_Abort_IT+0xd4>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d022      	beq.n	80009d4 <HAL_DMA_Abort_IT+0x9c>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a1f      	ldr	r2, [pc, #124]	; (8000a10 <HAL_DMA_Abort_IT+0xd8>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d01a      	beq.n	80009ce <HAL_DMA_Abort_IT+0x96>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <HAL_DMA_Abort_IT+0xdc>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d012      	beq.n	80009c8 <HAL_DMA_Abort_IT+0x90>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <HAL_DMA_Abort_IT+0xe0>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d00a      	beq.n	80009c2 <HAL_DMA_Abort_IT+0x8a>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1a      	ldr	r2, [pc, #104]	; (8000a1c <HAL_DMA_Abort_IT+0xe4>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d102      	bne.n	80009bc <HAL_DMA_Abort_IT+0x84>
 80009b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009ba:	e00e      	b.n	80009da <HAL_DMA_Abort_IT+0xa2>
 80009bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009c0:	e00b      	b.n	80009da <HAL_DMA_Abort_IT+0xa2>
 80009c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c6:	e008      	b.n	80009da <HAL_DMA_Abort_IT+0xa2>
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	e005      	b.n	80009da <HAL_DMA_Abort_IT+0xa2>
 80009ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d2:	e002      	b.n	80009da <HAL_DMA_Abort_IT+0xa2>
 80009d4:	2310      	movs	r3, #16
 80009d6:	e000      	b.n	80009da <HAL_DMA_Abort_IT+0xa2>
 80009d8:	2301      	movs	r3, #1
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <HAL_DMA_Abort_IT+0xe8>)
 80009dc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2201      	movs	r2, #1
 80009e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	4798      	blx	r3
    } 
  }
  return status;
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40020008 	.word	0x40020008
 8000a0c:	4002001c 	.word	0x4002001c
 8000a10:	40020030 	.word	0x40020030
 8000a14:	40020044 	.word	0x40020044
 8000a18:	40020058 	.word	0x40020058
 8000a1c:	4002006c 	.word	0x4002006c
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b08b      	sub	sp, #44	; 0x2c
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a36:	e169      	b.n	8000d0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	69fa      	ldr	r2, [r7, #28]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	f040 8158 	bne.w	8000d06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	4a9a      	ldr	r2, [pc, #616]	; (8000cc4 <HAL_GPIO_Init+0x2a0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d05e      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a60:	4a98      	ldr	r2, [pc, #608]	; (8000cc4 <HAL_GPIO_Init+0x2a0>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d875      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a66:	4a98      	ldr	r2, [pc, #608]	; (8000cc8 <HAL_GPIO_Init+0x2a4>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d058      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a6c:	4a96      	ldr	r2, [pc, #600]	; (8000cc8 <HAL_GPIO_Init+0x2a4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d86f      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a72:	4a96      	ldr	r2, [pc, #600]	; (8000ccc <HAL_GPIO_Init+0x2a8>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d052      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a78:	4a94      	ldr	r2, [pc, #592]	; (8000ccc <HAL_GPIO_Init+0x2a8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d869      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a7e:	4a94      	ldr	r2, [pc, #592]	; (8000cd0 <HAL_GPIO_Init+0x2ac>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d04c      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a84:	4a92      	ldr	r2, [pc, #584]	; (8000cd0 <HAL_GPIO_Init+0x2ac>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d863      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a8a:	4a92      	ldr	r2, [pc, #584]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d046      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a90:	4a90      	ldr	r2, [pc, #576]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d85d      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a96:	2b12      	cmp	r3, #18
 8000a98:	d82a      	bhi.n	8000af0 <HAL_GPIO_Init+0xcc>
 8000a9a:	2b12      	cmp	r3, #18
 8000a9c:	d859      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a9e:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <HAL_GPIO_Init+0x80>)
 8000aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa4:	08000b1f 	.word	0x08000b1f
 8000aa8:	08000af9 	.word	0x08000af9
 8000aac:	08000b0b 	.word	0x08000b0b
 8000ab0:	08000b4d 	.word	0x08000b4d
 8000ab4:	08000b53 	.word	0x08000b53
 8000ab8:	08000b53 	.word	0x08000b53
 8000abc:	08000b53 	.word	0x08000b53
 8000ac0:	08000b53 	.word	0x08000b53
 8000ac4:	08000b53 	.word	0x08000b53
 8000ac8:	08000b53 	.word	0x08000b53
 8000acc:	08000b53 	.word	0x08000b53
 8000ad0:	08000b53 	.word	0x08000b53
 8000ad4:	08000b53 	.word	0x08000b53
 8000ad8:	08000b53 	.word	0x08000b53
 8000adc:	08000b53 	.word	0x08000b53
 8000ae0:	08000b53 	.word	0x08000b53
 8000ae4:	08000b53 	.word	0x08000b53
 8000ae8:	08000b01 	.word	0x08000b01
 8000aec:	08000b15 	.word	0x08000b15
 8000af0:	4a79      	ldr	r2, [pc, #484]	; (8000cd8 <HAL_GPIO_Init+0x2b4>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d013      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000af6:	e02c      	b.n	8000b52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	623b      	str	r3, [r7, #32]
          break;
 8000afe:	e029      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	3304      	adds	r3, #4
 8000b06:	623b      	str	r3, [r7, #32]
          break;
 8000b08:	e024      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	3308      	adds	r3, #8
 8000b10:	623b      	str	r3, [r7, #32]
          break;
 8000b12:	e01f      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	330c      	adds	r3, #12
 8000b1a:	623b      	str	r3, [r7, #32]
          break;
 8000b1c:	e01a      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b26:	2304      	movs	r3, #4
 8000b28:	623b      	str	r3, [r7, #32]
          break;
 8000b2a:	e013      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d105      	bne.n	8000b40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b34:	2308      	movs	r3, #8
 8000b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	611a      	str	r2, [r3, #16]
          break;
 8000b3e:	e009      	b.n	8000b54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b40:	2308      	movs	r3, #8
 8000b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	615a      	str	r2, [r3, #20]
          break;
 8000b4a:	e003      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
          break;
 8000b50:	e000      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          break;
 8000b52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	2bff      	cmp	r3, #255	; 0xff
 8000b58:	d801      	bhi.n	8000b5e <HAL_GPIO_Init+0x13a>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	e001      	b.n	8000b62 <HAL_GPIO_Init+0x13e>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3304      	adds	r3, #4
 8000b62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	2bff      	cmp	r3, #255	; 0xff
 8000b68:	d802      	bhi.n	8000b70 <HAL_GPIO_Init+0x14c>
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	e002      	b.n	8000b76 <HAL_GPIO_Init+0x152>
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	3b08      	subs	r3, #8
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	401a      	ands	r2, r3
 8000b88:	6a39      	ldr	r1, [r7, #32]
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	431a      	orrs	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 80b1 	beq.w	8000d06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba4:	4b4d      	ldr	r3, [pc, #308]	; (8000cdc <HAL_GPIO_Init+0x2b8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a4c      	ldr	r2, [pc, #304]	; (8000cdc <HAL_GPIO_Init+0x2b8>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b4a      	ldr	r3, [pc, #296]	; (8000cdc <HAL_GPIO_Init+0x2b8>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bbc:	4a48      	ldr	r2, [pc, #288]	; (8000ce0 <HAL_GPIO_Init+0x2bc>)
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a40      	ldr	r2, [pc, #256]	; (8000ce4 <HAL_GPIO_Init+0x2c0>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d013      	beq.n	8000c10 <HAL_GPIO_Init+0x1ec>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a3f      	ldr	r2, [pc, #252]	; (8000ce8 <HAL_GPIO_Init+0x2c4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d00d      	beq.n	8000c0c <HAL_GPIO_Init+0x1e8>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a3e      	ldr	r2, [pc, #248]	; (8000cec <HAL_GPIO_Init+0x2c8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d007      	beq.n	8000c08 <HAL_GPIO_Init+0x1e4>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a3d      	ldr	r2, [pc, #244]	; (8000cf0 <HAL_GPIO_Init+0x2cc>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d101      	bne.n	8000c04 <HAL_GPIO_Init+0x1e0>
 8000c00:	2303      	movs	r3, #3
 8000c02:	e006      	b.n	8000c12 <HAL_GPIO_Init+0x1ee>
 8000c04:	2304      	movs	r3, #4
 8000c06:	e004      	b.n	8000c12 <HAL_GPIO_Init+0x1ee>
 8000c08:	2302      	movs	r3, #2
 8000c0a:	e002      	b.n	8000c12 <HAL_GPIO_Init+0x1ee>
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e000      	b.n	8000c12 <HAL_GPIO_Init+0x1ee>
 8000c10:	2300      	movs	r3, #0
 8000c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c14:	f002 0203 	and.w	r2, r2, #3
 8000c18:	0092      	lsls	r2, r2, #2
 8000c1a:	4093      	lsls	r3, r2
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c22:	492f      	ldr	r1, [pc, #188]	; (8000ce0 <HAL_GPIO_Init+0x2bc>)
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	3302      	adds	r3, #2
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d006      	beq.n	8000c4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	492c      	ldr	r1, [pc, #176]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	600b      	str	r3, [r1, #0]
 8000c48:	e006      	b.n	8000c58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	4928      	ldr	r1, [pc, #160]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c54:	4013      	ands	r3, r2
 8000c56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d006      	beq.n	8000c72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	4922      	ldr	r1, [pc, #136]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	604b      	str	r3, [r1, #4]
 8000c70:	e006      	b.n	8000c80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c72:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	491e      	ldr	r1, [pc, #120]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	4918      	ldr	r1, [pc, #96]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	608b      	str	r3, [r1, #8]
 8000c98:	e006      	b.n	8000ca8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	4914      	ldr	r1, [pc, #80]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d021      	beq.n	8000cf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	490e      	ldr	r1, [pc, #56]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	60cb      	str	r3, [r1, #12]
 8000cc0:	e021      	b.n	8000d06 <HAL_GPIO_Init+0x2e2>
 8000cc2:	bf00      	nop
 8000cc4:	10320000 	.word	0x10320000
 8000cc8:	10310000 	.word	0x10310000
 8000ccc:	10220000 	.word	0x10220000
 8000cd0:	10210000 	.word	0x10210000
 8000cd4:	10120000 	.word	0x10120000
 8000cd8:	10110000 	.word	0x10110000
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010000 	.word	0x40010000
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	40010c00 	.word	0x40010c00
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	40011400 	.word	0x40011400
 8000cf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_GPIO_Init+0x304>)
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	4909      	ldr	r1, [pc, #36]	; (8000d28 <HAL_GPIO_Init+0x304>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	3301      	adds	r3, #1
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	fa22 f303 	lsr.w	r3, r2, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f47f ae8e 	bne.w	8000a38 <HAL_GPIO_Init+0x14>
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	372c      	adds	r7, #44	; 0x2c
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	40010400 	.word	0x40010400

08000d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	887b      	ldrh	r3, [r7, #2]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e001      	b.n	8000d4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr

08000d5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	807b      	strh	r3, [r7, #2]
 8000d66:	4613      	mov	r3, r2
 8000d68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d6a:	787b      	ldrb	r3, [r7, #1]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d70:	887a      	ldrh	r2, [r7, #2]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d76:	e003      	b.n	8000d80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	041a      	lsls	r2, r3, #16
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	611a      	str	r2, [r3, #16]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
	...

08000d8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d98:	695a      	ldr	r2, [r3, #20]
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d006      	beq.n	8000db0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff f9ce 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40010400 	.word	0x40010400

08000dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e272      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 8087 	beq.w	8000eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ddc:	4b92      	ldr	r3, [pc, #584]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 030c 	and.w	r3, r3, #12
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d00c      	beq.n	8000e02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de8:	4b8f      	ldr	r3, [pc, #572]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d112      	bne.n	8000e1a <HAL_RCC_OscConfig+0x5e>
 8000df4:	4b8c      	ldr	r3, [pc, #560]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e00:	d10b      	bne.n	8000e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e02:	4b89      	ldr	r3, [pc, #548]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d06c      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x12c>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d168      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e24c      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e22:	d106      	bne.n	8000e32 <HAL_RCC_OscConfig+0x76>
 8000e24:	4b80      	ldr	r3, [pc, #512]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a7f      	ldr	r2, [pc, #508]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e02e      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x98>
 8000e3a:	4b7b      	ldr	r3, [pc, #492]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a7a      	ldr	r2, [pc, #488]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b78      	ldr	r3, [pc, #480]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a77      	ldr	r2, [pc, #476]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e01d      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0xbc>
 8000e5e:	4b72      	ldr	r3, [pc, #456]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a71      	ldr	r2, [pc, #452]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	4b6f      	ldr	r3, [pc, #444]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a6e      	ldr	r2, [pc, #440]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e00b      	b.n	8000e90 <HAL_RCC_OscConfig+0xd4>
 8000e78:	4b6b      	ldr	r3, [pc, #428]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a6a      	ldr	r2, [pc, #424]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b68      	ldr	r3, [pc, #416]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a67      	ldr	r2, [pc, #412]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d013      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fc1a 	bl	80006d0 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fc16 	bl	80006d0 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b64      	cmp	r3, #100	; 0x64
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e200      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb2:	4b5d      	ldr	r3, [pc, #372]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f0      	beq.n	8000ea0 <HAL_RCC_OscConfig+0xe4>
 8000ebe:	e014      	b.n	8000eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fc06 	bl	80006d0 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fc02 	bl	80006d0 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e1ec      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eda:	4b53      	ldr	r3, [pc, #332]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x10c>
 8000ee6:	e000      	b.n	8000eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d063      	beq.n	8000fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00b      	beq.n	8000f1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f02:	4b49      	ldr	r3, [pc, #292]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d11c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x18c>
 8000f0e:	4b46      	ldr	r3, [pc, #280]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d116      	bne.n	8000f48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1a:	4b43      	ldr	r3, [pc, #268]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d005      	beq.n	8000f32 <HAL_RCC_OscConfig+0x176>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d001      	beq.n	8000f32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e1c0      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f32:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4939      	ldr	r1, [pc, #228]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f46:	e03a      	b.n	8000fbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d020      	beq.n	8000f92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f50:	4b36      	ldr	r3, [pc, #216]	; (800102c <HAL_RCC_OscConfig+0x270>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fbbb 	bl	80006d0 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fbb7 	bl	80006d0 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e1a1      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f70:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4927      	ldr	r1, [pc, #156]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	600b      	str	r3, [r1, #0]
 8000f90:	e015      	b.n	8000fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <HAL_RCC_OscConfig+0x270>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fb9a 	bl	80006d0 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fb96 	bl	80006d0 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e180      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d03a      	beq.n	8001040 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d019      	beq.n	8001006 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_RCC_OscConfig+0x274>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd8:	f7ff fb7a 	bl	80006d0 <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe0:	f7ff fb76 	bl	80006d0 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e160      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f0      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 faa6 	bl	8001550 <RCC_Delay>
 8001004:	e01c      	b.n	8001040 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_RCC_OscConfig+0x274>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100c:	f7ff fb60 	bl	80006d0 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001012:	e00f      	b.n	8001034 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001014:	f7ff fb5c 	bl	80006d0 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d908      	bls.n	8001034 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e146      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	42420000 	.word	0x42420000
 8001030:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001034:	4b92      	ldr	r3, [pc, #584]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1e9      	bne.n	8001014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80a6 	beq.w	800119a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001052:	4b8b      	ldr	r3, [pc, #556]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10d      	bne.n	800107a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b88      	ldr	r3, [pc, #544]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a87      	ldr	r2, [pc, #540]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b85      	ldr	r3, [pc, #532]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001076:	2301      	movs	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107a:	4b82      	ldr	r3, [pc, #520]	; (8001284 <HAL_RCC_OscConfig+0x4c8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001082:	2b00      	cmp	r3, #0
 8001084:	d118      	bne.n	80010b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001086:	4b7f      	ldr	r3, [pc, #508]	; (8001284 <HAL_RCC_OscConfig+0x4c8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a7e      	ldr	r2, [pc, #504]	; (8001284 <HAL_RCC_OscConfig+0x4c8>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001092:	f7ff fb1d 	bl	80006d0 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109a:	f7ff fb19 	bl	80006d0 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b64      	cmp	r3, #100	; 0x64
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e103      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ac:	4b75      	ldr	r3, [pc, #468]	; (8001284 <HAL_RCC_OscConfig+0x4c8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x312>
 80010c0:	4b6f      	ldr	r3, [pc, #444]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4a6e      	ldr	r2, [pc, #440]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6213      	str	r3, [r2, #32]
 80010cc:	e02d      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x334>
 80010d6:	4b6a      	ldr	r3, [pc, #424]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	4a69      	ldr	r2, [pc, #420]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	6213      	str	r3, [r2, #32]
 80010e2:	4b67      	ldr	r3, [pc, #412]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a66      	ldr	r2, [pc, #408]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	f023 0304 	bic.w	r3, r3, #4
 80010ec:	6213      	str	r3, [r2, #32]
 80010ee:	e01c      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d10c      	bne.n	8001112 <HAL_RCC_OscConfig+0x356>
 80010f8:	4b61      	ldr	r3, [pc, #388]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	4a60      	ldr	r2, [pc, #384]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6213      	str	r3, [r2, #32]
 8001104:	4b5e      	ldr	r3, [pc, #376]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4a5d      	ldr	r2, [pc, #372]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6213      	str	r3, [r2, #32]
 8001110:	e00b      	b.n	800112a <HAL_RCC_OscConfig+0x36e>
 8001112:	4b5b      	ldr	r3, [pc, #364]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	4a5a      	ldr	r2, [pc, #360]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	6213      	str	r3, [r2, #32]
 800111e:	4b58      	ldr	r3, [pc, #352]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a57      	ldr	r2, [pc, #348]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	f023 0304 	bic.w	r3, r3, #4
 8001128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d015      	beq.n	800115e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff facd 	bl	80006d0 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113a:	f7ff fac9 	bl	80006d0 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f241 3288 	movw	r2, #5000	; 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e0b1      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001150:	4b4b      	ldr	r3, [pc, #300]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0ee      	beq.n	800113a <HAL_RCC_OscConfig+0x37e>
 800115c:	e014      	b.n	8001188 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115e:	f7ff fab7 	bl	80006d0 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001164:	e00a      	b.n	800117c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001166:	f7ff fab3 	bl	80006d0 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f241 3288 	movw	r2, #5000	; 0x1388
 8001174:	4293      	cmp	r3, r2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e09b      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800117c:	4b40      	ldr	r3, [pc, #256]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1ee      	bne.n	8001166 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d105      	bne.n	800119a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800118e:	4b3c      	ldr	r3, [pc, #240]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a3b      	ldr	r2, [pc, #236]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 8087 	beq.w	80012b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a4:	4b36      	ldr	r3, [pc, #216]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 030c 	and.w	r3, r3, #12
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d061      	beq.n	8001274 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d146      	bne.n	8001246 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b8:	4b33      	ldr	r3, [pc, #204]	; (8001288 <HAL_RCC_OscConfig+0x4cc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fa87 	bl	80006d0 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff fa83 	bl	80006d0 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e06d      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f0      	bne.n	80011c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ec:	d108      	bne.n	8001200 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ee:	4b24      	ldr	r3, [pc, #144]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	4921      	ldr	r1, [pc, #132]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a19      	ldr	r1, [r3, #32]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	430b      	orrs	r3, r1
 8001212:	491b      	ldr	r1, [pc, #108]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <HAL_RCC_OscConfig+0x4cc>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fa57 	bl	80006d0 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001226:	f7ff fa53 	bl	80006d0 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e03d      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x46a>
 8001244:	e035      	b.n	80012b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_RCC_OscConfig+0x4cc>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fa40 	bl	80006d0 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001254:	f7ff fa3c 	bl	80006d0 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e026      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x498>
 8001272:	e01e      	b.n	80012b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d107      	bne.n	800128c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e019      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
 8001280:	40021000 	.word	0x40021000
 8001284:	40007000 	.word	0x40007000
 8001288:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_RCC_OscConfig+0x500>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	429a      	cmp	r2, r3
 800129e:	d106      	bne.n	80012ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d001      	beq.n	80012b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0d0      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d910      	bls.n	8001304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e2:	4b67      	ldr	r3, [pc, #412]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 0207 	bic.w	r2, r3, #7
 80012ea:	4965      	ldr	r1, [pc, #404]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f2:	4b63      	ldr	r3, [pc, #396]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e0b8      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d020      	beq.n	8001352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800131c:	4b59      	ldr	r3, [pc, #356]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a58      	ldr	r2, [pc, #352]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001334:	4b53      	ldr	r3, [pc, #332]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a52      	ldr	r2, [pc, #328]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800133e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001340:	4b50      	ldr	r3, [pc, #320]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	494d      	ldr	r1, [pc, #308]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d040      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d107      	bne.n	8001376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	4b47      	ldr	r3, [pc, #284]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d115      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e07f      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d107      	bne.n	800138e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137e:	4b41      	ldr	r3, [pc, #260]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e073      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138e:	4b3d      	ldr	r3, [pc, #244]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e06b      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139e:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f023 0203 	bic.w	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	4936      	ldr	r1, [pc, #216]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013b0:	f7ff f98e 	bl	80006d0 <HAL_GetTick>
 80013b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b6:	e00a      	b.n	80013ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b8:	f7ff f98a 	bl	80006d0 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e053      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 020c 	and.w	r2, r3, #12
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	429a      	cmp	r2, r3
 80013de:	d1eb      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d210      	bcs.n	8001410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 0207 	bic.w	r2, r3, #7
 80013f6:	4922      	ldr	r1, [pc, #136]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e032      	b.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4916      	ldr	r1, [pc, #88]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d009      	beq.n	800144e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	490e      	ldr	r1, [pc, #56]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800144e:	f000 f821 	bl	8001494 <HAL_RCC_GetSysClockFreq>
 8001452:	4602      	mov	r2, r0
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	490a      	ldr	r1, [pc, #40]	; (8001488 <HAL_RCC_ClockConfig+0x1c8>)
 8001460:	5ccb      	ldrb	r3, [r1, r3]
 8001462:	fa22 f303 	lsr.w	r3, r2, r3
 8001466:	4a09      	ldr	r2, [pc, #36]	; (800148c <HAL_RCC_ClockConfig+0x1cc>)
 8001468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_RCC_ClockConfig+0x1d0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f8ec 	bl	800064c <HAL_InitTick>

  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40022000 	.word	0x40022000
 8001484:	40021000 	.word	0x40021000
 8001488:	08001fc0 	.word	0x08001fc0
 800148c:	20000000 	.word	0x20000000
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001494:	b490      	push	{r4, r7}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <HAL_RCC_GetSysClockFreq+0xac>)
 800149c:	1d3c      	adds	r4, r7, #4
 800149e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014a4:	f240 2301 	movw	r3, #513	; 0x201
 80014a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d002      	beq.n	80014d4 <HAL_RCC_GetSysClockFreq+0x40>
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d003      	beq.n	80014da <HAL_RCC_GetSysClockFreq+0x46>
 80014d2:	e02b      	b.n	800152c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014d4:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014d6:	623b      	str	r3, [r7, #32]
      break;
 80014d8:	e02b      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	0c9b      	lsrs	r3, r3, #18
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3328      	adds	r3, #40	; 0x28
 80014e4:	443b      	add	r3, r7
 80014e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d012      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	0c5b      	lsrs	r3, r3, #17
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	3328      	adds	r3, #40	; 0x28
 8001502:	443b      	add	r3, r7
 8001504:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001508:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_RCC_GetSysClockFreq+0xb4>)
 800150e:	fb03 f202 	mul.w	r2, r3, r2
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	fbb2 f3f3 	udiv	r3, r2, r3
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
 800151a:	e004      	b.n	8001526 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001520:	fb02 f303 	mul.w	r3, r2, r3
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	623b      	str	r3, [r7, #32]
      break;
 800152a:	e002      	b.n	8001532 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_RCC_GetSysClockFreq+0xb4>)
 800152e:	623b      	str	r3, [r7, #32]
      break;
 8001530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001532:	6a3b      	ldr	r3, [r7, #32]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3728      	adds	r7, #40	; 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bc90      	pop	{r4, r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	08001fb0 	.word	0x08001fb0
 8001544:	40021000 	.word	0x40021000
 8001548:	007a1200 	.word	0x007a1200
 800154c:	003d0900 	.word	0x003d0900

08001550 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <RCC_Delay+0x34>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <RCC_Delay+0x38>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	0a5b      	lsrs	r3, r3, #9
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800156c:	bf00      	nop
  }
  while (Delay --);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1e5a      	subs	r2, r3, #1
 8001572:	60fa      	str	r2, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f9      	bne.n	800156c <RCC_Delay+0x1c>
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	20000000 	.word	0x20000000
 8001588:	10624dd3 	.word	0x10624dd3

0800158c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e07e      	b.n	800169c <HAL_SPI_Init+0x110>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d108      	bne.n	80015b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015ae:	d009      	beq.n	80015c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
 80015b6:	e005      	b.n	80015c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d106      	bne.n	80015de <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7fe ff67 	bl	80004ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2202      	movs	r2, #2
 80015e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001642:	ea42 0103 	orr.w	r1, r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	0c1a      	lsrs	r2, r3, #16
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f002 0204 	and.w	r2, r2, #4
 8001664:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166e:	d105      	bne.n	800167c <HAL_SPI_Init+0xf0>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b292      	uxth	r2, r2
 800167a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	69da      	ldr	r2, [r3, #28]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_SPI_TransmitReceive_IT+0x20>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e08a      	b.n	80017da <HAL_SPI_TransmitReceive_IT+0x136>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016d2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80016da:	7dbb      	ldrb	r3, [r7, #22]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d00d      	beq.n	80016fc <HAL_SPI_TransmitReceive_IT+0x58>
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016e6:	d106      	bne.n	80016f6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <HAL_SPI_TransmitReceive_IT+0x52>
 80016f0:	7dbb      	ldrb	r3, [r7, #22]
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d002      	beq.n	80016fc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80016f6:	2302      	movs	r3, #2
 80016f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80016fa:	e069      	b.n	80017d0 <HAL_SPI_TransmitReceive_IT+0x12c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001712:	e05d      	b.n	80017d0 <HAL_SPI_TransmitReceive_IT+0x12c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b04      	cmp	r3, #4
 800171e:	d003      	beq.n	8001728 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2205      	movs	r2, #5
 8001724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	887a      	ldrh	r2, [r7, #2]
 800173e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	887a      	ldrh	r2, [r7, #2]
 800174a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <HAL_SPI_TransmitReceive_IT+0x140>)
 800175e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4a21      	ldr	r2, [pc, #132]	; (80017e8 <HAL_SPI_TransmitReceive_IT+0x144>)
 8001764:	645a      	str	r2, [r3, #68]	; 0x44
 8001766:	e005      	b.n	8001774 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4a20      	ldr	r2, [pc, #128]	; (80017ec <HAL_SPI_TransmitReceive_IT+0x148>)
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8001772:	645a      	str	r2, [r3, #68]	; 0x44
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800177c:	d10f      	bne.n	800179e <HAL_SPI_TransmitReceive_IT+0xfa>
  {
    SPI_RESET_CRC(hspi);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800179c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80017ac:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b8:	2b40      	cmp	r3, #64	; 0x40
 80017ba:	d008      	beq.n	80017ce <HAL_SPI_TransmitReceive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e000      	b.n	80017d0 <HAL_SPI_TransmitReceive_IT+0x12c>
  }

error :
 80017ce:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	08001b69 	.word	0x08001b69
 80017e8:	08001c11 	.word	0x08001c11
 80017ec:	08001a21 	.word	0x08001a21
 80017f0:	08001adf 	.word	0x08001adf

080017f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	099b      	lsrs	r3, r3, #6
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10f      	bne.n	8001838 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00a      	beq.n	8001838 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	099b      	lsrs	r3, r3, #6
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	4798      	blx	r3
    return;
 8001836:	e0be      	b.n	80019b6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	085b      	lsrs	r3, r3, #1
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00a      	beq.n	800185a <HAL_SPI_IRQHandler+0x66>
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	09db      	lsrs	r3, r3, #7
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
    return;
 8001858:	e0ad      	b.n	80019b6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	095b      	lsrs	r3, r3, #5
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d106      	bne.n	8001874 <HAL_SPI_IRQHandler+0x80>
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	099b      	lsrs	r3, r3, #6
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80a1 	beq.w	80019b6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 809a 	beq.w	80019b6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	099b      	lsrs	r3, r3, #6
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d023      	beq.n	80018d6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b03      	cmp	r3, #3
 8001898:	d011      	beq.n	80018be <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	f043 0204 	orr.w	r2, r3, #4
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	e00b      	b.n	80018d6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693b      	ldr	r3, [r7, #16]
        return;
 80018d4:	e06f      	b.n	80019b6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	095b      	lsrs	r3, r3, #5
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d014      	beq.n	800190c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001910:	2b00      	cmp	r3, #0
 8001912:	d04f      	beq.n	80019b4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001922:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d104      	bne.n	8001940 <HAL_SPI_IRQHandler+0x14c>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d034      	beq.n	80019aa <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0203 	bic.w	r2, r2, #3
 800194e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d011      	beq.n	800197c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	4a17      	ldr	r2, [pc, #92]	; (80019bc <HAL_SPI_IRQHandler+0x1c8>)
 800195e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe ffe7 	bl	8000938 <HAL_DMA_Abort_IT>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001974:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001980:	2b00      	cmp	r3, #0
 8001982:	d016      	beq.n	80019b2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001988:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <HAL_SPI_IRQHandler+0x1c8>)
 800198a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe ffd1 	bl	8000938 <HAL_DMA_Abort_IT>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00a      	beq.n	80019b2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80019a8:	e003      	b.n	80019b2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f81a 	bl	80019e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80019b0:	e000      	b.n	80019b4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80019b2:	bf00      	nop
    return;
 80019b4:	bf00      	nop
  }
}
 80019b6:	3720      	adds	r7, #32
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	080019f7 	.word	0x080019f7

080019c0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f7ff ffe7 	bl	80019e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f103 020c 	add.w	r2, r3, #12
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a34:	7812      	ldrb	r2, [r2, #0]
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d118      	bne.n	8001a8e <SPI_2linesRxISR_8BIT+0x6e>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a64:	d103      	bne.n	8001a6e <SPI_2linesRxISR_8BIT+0x4e>
    {
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <SPI_2linesRxISR_8BIT+0x74>)
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
      return;
 8001a6c:	e00f      	b.n	8001a8e <SPI_2linesRxISR_8BIT+0x6e>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a7c:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <SPI_2linesRxISR_8BIT+0x6e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f9ab 	bl	8001de4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	08001a99 	.word	0x08001a99

08001a98 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	330c      	adds	r3, #12
 8001aaa:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8001ab4:	7afb      	ldrb	r3, [r7, #11]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ac4:	605a      	str	r2, [r3, #4]

  if (hspi->TxXferCount == 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <SPI_2linesRxISR_8BITCRC+0x3e>
  {
    SPI_CloseRxTx_ISR(hspi);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f987 	bl	8001de4 <SPI_CloseRxTx_ISR>
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	330c      	adds	r3, #12
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d125      	bne.n	8001b62 <SPI_2linesTxISR_8BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b1e:	d110      	bne.n	8001b42 <SPI_2linesTxISR_8BIT+0x64>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b2e:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b3e:	605a      	str	r2, [r3, #4]
      return;
 8001b40:	e00f      	b.n	8001b62 <SPI_2linesTxISR_8BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b50:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <SPI_2linesTxISR_8BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f941 	bl	8001de4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	b292      	uxth	r2, r2
 8001b7c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b82:	1c9a      	adds	r2, r3, #2
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d118      	bne.n	8001bd2 <SPI_2linesRxISR_16BIT+0x6a>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba8:	d103      	bne.n	8001bb2 <SPI_2linesRxISR_16BIT+0x4a>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <SPI_2linesRxISR_16BIT+0x70>)
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
      return;
 8001bb0:	e00f      	b.n	8001bd2 <SPI_2linesRxISR_16BIT+0x6a>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc0:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <SPI_2linesRxISR_16BIT+0x6a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f909 	bl	8001de4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	08001bdd 	.word	0x08001bdd

08001bdc <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);  
 8001bf0:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c00:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8ee 	bl	8001de4 <SPI_CloseRxTx_ISR>
}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	881a      	ldrh	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	1c9a      	adds	r2, r3, #2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d125      	bne.n	8001c92 <SPI_2linesTxISR_16BIT+0x82>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c4e:	d110      	bne.n	8001c72 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c5e:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c6e:	605a      	str	r2, [r3, #4]
      return;
 8001c70:	e00f      	b.n	8001c92 <SPI_2linesTxISR_16BIT+0x82>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c80:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <SPI_2linesTxISR_16BIT+0x82>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f8a9 	bl	8001de4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ca8:	f7fe fd12 	bl	80006d0 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb0:	1a9b      	subs	r3, r3, r2
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001cb8:	f7fe fd0a 	bl	80006d0 <HAL_GetTick>
 8001cbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001cbe:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	015b      	lsls	r3, r3, #5
 8001cc4:	0d1b      	lsrs	r3, r3, #20
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	fb02 f303 	mul.w	r3, r2, r3
 8001ccc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cce:	e054      	b.n	8001d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd6:	d050      	beq.n	8001d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001cd8:	f7fe fcfa 	bl	80006d0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d902      	bls.n	8001cee <SPI_WaitFlagStateUntilTimeout+0x56>
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d13d      	bne.n	8001d6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001cfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d06:	d111      	bne.n	8001d2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d10:	d004      	beq.n	8001d1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1a:	d107      	bne.n	8001d2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d34:	d10f      	bne.n	8001d56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e017      	b.n	8001d9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	4013      	ands	r3, r2
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	bf0c      	ite	eq
 8001d8a:	2301      	moveq	r3, #1
 8001d8c:	2300      	movne	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d19b      	bne.n	8001cd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3720      	adds	r7, #32
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000000 	.word	0x20000000

08001da8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f7ff ff6a 	bl	8001c98 <SPI_WaitFlagStateUntilTimeout>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	f043 0220 	orr.w	r2, r3, #32
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e000      	b.n	8001ddc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8001dec:	4b4d      	ldr	r3, [pc, #308]	; (8001f24 <SPI_CloseRxTx_ISR+0x140>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a4d      	ldr	r2, [pc, #308]	; (8001f28 <SPI_CloseRxTx_ISR+0x144>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0a5b      	lsrs	r3, r3, #9
 8001df8:	2264      	movs	r2, #100	; 0x64
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001e00:	f7fe fc66 	bl	80006d0 <HAL_GetTick>
 8001e04:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0220 	bic.w	r2, r2, #32
 8001e14:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d106      	bne.n	8001e2a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	f043 0220 	orr.w	r2, r3, #32
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001e28:	e009      	b.n	8001e3e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0eb      	beq.n	8001e16 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	2164      	movs	r1, #100	; 0x64
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffb0 	bl	8001da8 <SPI_EndRxTxTransaction>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	f043 0220 	orr.w	r2, r3, #32
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10a      	bne.n	8001e78 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d129      	bne.n	8001eda <SPI_CloseRxTx_ISR+0xf6>
  {
    /* Check if CRC error is valid or not (workaround to be applied or not) */
    if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f850 	bl	8001f2c <SPI_ISCRCErrorValid>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d11d      	bne.n	8001ece <SPI_CloseRxTx_ISR+0xea>
    {
      hspi->State = HAL_SPI_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	f043 0202 	orr.w	r2, r3, #2
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      SPI_RESET_CRC(hspi);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ec4:	601a      	str	r2, [r3, #0]

      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff fd8c 	bl	80019e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8001ecc:	e026      	b.n	8001f1c <SPI_CloseRxTx_ISR+0x138>
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001ed6:	609a      	str	r2, [r3, #8]
}
 8001ed8:	e020      	b.n	8001f1c <SPI_CloseRxTx_ISR+0x138>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d115      	bne.n	8001f0e <SPI_CloseRxTx_ISR+0x12a>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d107      	bne.n	8001efe <SPI_CloseRxTx_ISR+0x11a>
        hspi->State = HAL_SPI_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_RxCpltCallback(hspi);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff fd62 	bl	80019c0 <HAL_SPI_RxCpltCallback>
}
 8001efc:	e00e      	b.n	8001f1c <SPI_CloseRxTx_ISR+0x138>
        hspi->State = HAL_SPI_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fd63 	bl	80019d2 <HAL_SPI_TxRxCpltCallback>
}
 8001f0c:	e006      	b.n	8001f1c <SPI_CloseRxTx_ISR+0x138>
      hspi->State = HAL_SPI_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff fd64 	bl	80019e4 <HAL_SPI_ErrorCallback>
}
 8001f1c:	bf00      	nop
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000000 	.word	0x20000000
 8001f28:	057619f1 	.word	0x057619f1

08001f2c <SPI_ISCRCErrorValid>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval CRC error validity (SPI_INVALID_CRC_ERROR or SPI_VALID_CRC_ERROR).
  */
uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  }
#endif
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);

  return (SPI_VALID_CRC_ERROR);
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <__libc_init_array>:
 8001f40:	b570      	push	{r4, r5, r6, lr}
 8001f42:	2600      	movs	r6, #0
 8001f44:	4d0c      	ldr	r5, [pc, #48]	; (8001f78 <__libc_init_array+0x38>)
 8001f46:	4c0d      	ldr	r4, [pc, #52]	; (8001f7c <__libc_init_array+0x3c>)
 8001f48:	1b64      	subs	r4, r4, r5
 8001f4a:	10a4      	asrs	r4, r4, #2
 8001f4c:	42a6      	cmp	r6, r4
 8001f4e:	d109      	bne.n	8001f64 <__libc_init_array+0x24>
 8001f50:	f000 f822 	bl	8001f98 <_init>
 8001f54:	2600      	movs	r6, #0
 8001f56:	4d0a      	ldr	r5, [pc, #40]	; (8001f80 <__libc_init_array+0x40>)
 8001f58:	4c0a      	ldr	r4, [pc, #40]	; (8001f84 <__libc_init_array+0x44>)
 8001f5a:	1b64      	subs	r4, r4, r5
 8001f5c:	10a4      	asrs	r4, r4, #2
 8001f5e:	42a6      	cmp	r6, r4
 8001f60:	d105      	bne.n	8001f6e <__libc_init_array+0x2e>
 8001f62:	bd70      	pop	{r4, r5, r6, pc}
 8001f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f68:	4798      	blx	r3
 8001f6a:	3601      	adds	r6, #1
 8001f6c:	e7ee      	b.n	8001f4c <__libc_init_array+0xc>
 8001f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f72:	4798      	blx	r3
 8001f74:	3601      	adds	r6, #1
 8001f76:	e7f2      	b.n	8001f5e <__libc_init_array+0x1e>
 8001f78:	08001fd0 	.word	0x08001fd0
 8001f7c:	08001fd0 	.word	0x08001fd0
 8001f80:	08001fd0 	.word	0x08001fd0
 8001f84:	08001fd4 	.word	0x08001fd4

08001f88 <memset>:
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4402      	add	r2, r0
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d100      	bne.n	8001f92 <memset+0xa>
 8001f90:	4770      	bx	lr
 8001f92:	f803 1b01 	strb.w	r1, [r3], #1
 8001f96:	e7f9      	b.n	8001f8c <memset+0x4>

08001f98 <_init>:
 8001f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9a:	bf00      	nop
 8001f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f9e:	bc08      	pop	{r3}
 8001fa0:	469e      	mov	lr, r3
 8001fa2:	4770      	bx	lr

08001fa4 <_fini>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	bf00      	nop
 8001fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001faa:	bc08      	pop	{r3}
 8001fac:	469e      	mov	lr, r3
 8001fae:	4770      	bx	lr
