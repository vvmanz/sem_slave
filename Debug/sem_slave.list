
sem_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080022b8  080022b8  000122b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022d8  080022d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022d8  080022d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022d8  080022d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022d8  080022d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080022ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080022ec  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006581  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000166f  00000000  00000000  000265b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00027c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  00028308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016887  00000000  00000000  00028930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c83  00000000  00000000  0003f1b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080ab1  00000000  00000000  00046e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c78eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a6c  00000000  00000000  000c793c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080022a0 	.word	0x080022a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080022a0 	.word	0x080022a0

0800014c <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SPI_NSS_2_Pin) {
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800015c:	d11e      	bne.n	800019c <HAL_GPIO_EXTI_Callback+0x50>
		if (HAL_GPIO_ReadPin(SPI_NSS_2_GPIO_Port, SPI_NSS_2_Pin)
 800015e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000162:	4810      	ldr	r0, [pc, #64]	; (80001a4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000164:	f000 fe1e 	bl	8000da4 <HAL_GPIO_ReadPin>
 8000168:	4603      	mov	r3, r0
 800016a:	2b00      	cmp	r3, #0
 800016c:	d108      	bne.n	8000180 <HAL_GPIO_EXTI_Callback+0x34>
				== GPIO_PIN_RESET) {
			flag_nss = 0;
 800016e:	4b0e      	ldr	r3, [pc, #56]	; (80001a8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000170:	2200      	movs	r2, #0
 8000172:	601a      	str	r2, [r3, #0]
			HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t*) slave_transmit,
 8000174:	2318      	movs	r3, #24
 8000176:	4a0d      	ldr	r2, [pc, #52]	; (80001ac <HAL_GPIO_EXTI_Callback+0x60>)
 8000178:	490d      	ldr	r1, [pc, #52]	; (80001b0 <HAL_GPIO_EXTI_Callback+0x64>)
 800017a:	480e      	ldr	r0, [pc, #56]	; (80001b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800017c:	f001 face 	bl	800171c <HAL_SPI_TransmitReceive_IT>
					(uint8_t*) slave_receive, 24);
		}
		if (HAL_GPIO_ReadPin(SPI_NSS_2_GPIO_Port, SPI_NSS_2_Pin)
 8000180:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000184:	4807      	ldr	r0, [pc, #28]	; (80001a4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000186:	f000 fe0d 	bl	8000da4 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	2b01      	cmp	r3, #1
 800018e:	d105      	bne.n	800019c <HAL_GPIO_EXTI_Callback+0x50>
				== GPIO_PIN_SET) {
			flag_nss = 1;
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000192:	2201      	movs	r2, #1
 8000194:	601a      	str	r2, [r3, #0]
			HAL_SPI_Abort(&hspi2);
 8000196:	4807      	ldr	r0, [pc, #28]	; (80001b4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000198:	f001 fb68 	bl	800186c <HAL_SPI_Abort>
		}
	}
}
 800019c:	bf00      	nop
 800019e:	3708      	adds	r7, #8
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	40010c00 	.word	0x40010c00
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	200000a0 	.word	0x200000a0
 80001b0:	20000088 	.word	0x20000088
 80001b4:	20000030 	.word	0x20000030

080001b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001bc:	f000 fa32 	bl	8000624 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001c0:	f000 f822 	bl	8000208 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001c4:	f000 f8ae 	bl	8000324 <MX_GPIO_Init>
	MX_CRC_Init();
 80001c8:	f000 f864 	bl	8000294 <MX_CRC_Init>
	MX_SPI2_Init();
 80001cc:	f000 f876 	bl	80002bc <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	slave_transmit[0] = 0xAAAAAAAA;
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <main+0x4c>)
 80001d2:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80001d6:	601a      	str	r2, [r3, #0]
	slave_transmit[1] = 0xBBBBBBBB;
 80001d8:	4b0a      	ldr	r3, [pc, #40]	; (8000204 <main+0x4c>)
 80001da:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 80001de:	605a      	str	r2, [r3, #4]
	slave_transmit[2] = 0xCCCCCCCC;
 80001e0:	4b08      	ldr	r3, [pc, #32]	; (8000204 <main+0x4c>)
 80001e2:	f04f 32cc 	mov.w	r2, #3435973836	; 0xcccccccc
 80001e6:	609a      	str	r2, [r3, #8]
	slave_transmit[3] = 0xDDDDDDDD;
 80001e8:	4b06      	ldr	r3, [pc, #24]	; (8000204 <main+0x4c>)
 80001ea:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 80001ee:	60da      	str	r2, [r3, #12]
	slave_transmit[4] = 0xEEEEEEEE;
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <main+0x4c>)
 80001f2:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 80001f6:	611a      	str	r2, [r3, #16]
	slave_transmit[5] = 0xFFFFFFFF;
 80001f8:	4b02      	ldr	r3, [pc, #8]	; (8000204 <main+0x4c>)
 80001fa:	f04f 32ff 	mov.w	r2, #4294967295
 80001fe:	615a      	str	r2, [r3, #20]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000200:	e7fe      	b.n	8000200 <main+0x48>
 8000202:	bf00      	nop
 8000204:	20000088 	.word	0x20000088

08000208 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	; 0x40
 800020c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 f83a 	bl	8002290 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800022a:	2301      	movs	r3, #1
 800022c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000232:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000238:	2301      	movs	r3, #1
 800023a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023c:	2302      	movs	r3, #2
 800023e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000244:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800024a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fdef 	bl	8000e34 <HAL_RCC_OscConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x58>
		Error_Handler();
 800025c:	f000 f8d2 	bl	8000404 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000264:	2302      	movs	r3, #2
 8000266:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000270:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f001 f85c 	bl	8001338 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x82>
		Error_Handler();
 8000286:	f000 f8bd 	bl	8000404 <Error_Handler>
	}
}
 800028a:	bf00      	nop
 800028c:	3740      	adds	r7, #64	; 0x40
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <MX_CRC_Init+0x20>)
 800029a:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <MX_CRC_Init+0x24>)
 800029c:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800029e:	4805      	ldr	r0, [pc, #20]	; (80002b4 <MX_CRC_Init+0x20>)
 80002a0:	f000 fb2f 	bl	8000902 <HAL_CRC_Init>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_CRC_Init+0x1a>
		Error_Handler();
 80002aa:	f000 f8ab 	bl	8000404 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000028 	.word	0x20000028
 80002b8:	40023000 	.word	0x40023000

080002bc <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <MX_SPI2_Init+0x60>)
 80002c2:	4a17      	ldr	r2, [pc, #92]	; (8000320 <MX_SPI2_Init+0x64>)
 80002c4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 80002c6:	4b15      	ldr	r3, [pc, #84]	; (800031c <MX_SPI2_Init+0x60>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <MX_SPI2_Init+0x60>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80002d2:	4b12      	ldr	r3, [pc, #72]	; (800031c <MX_SPI2_Init+0x60>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <MX_SPI2_Init+0x60>)
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <MX_SPI2_Init+0x60>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <MX_SPI2_Init+0x60>)
 80002e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002ea:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002ec:	4b0b      	ldr	r3, [pc, #44]	; (800031c <MX_SPI2_Init+0x60>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <MX_SPI2_Init+0x60>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80002f8:	4b08      	ldr	r3, [pc, #32]	; (800031c <MX_SPI2_Init+0x60>)
 80002fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002fe:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_SPI2_Init+0x60>)
 8000302:	220a      	movs	r2, #10
 8000304:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000306:	4805      	ldr	r0, [pc, #20]	; (800031c <MX_SPI2_Init+0x60>)
 8000308:	f001 f97c 	bl	8001604 <HAL_SPI_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_SPI2_Init+0x5a>
		Error_Handler();
 8000312:	f000 f877 	bl	8000404 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000030 	.word	0x20000030
 8000320:	40003800 	.word	0x40003800

08000324 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b088      	sub	sp, #32
 8000328:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000338:	4b2e      	ldr	r3, [pc, #184]	; (80003f4 <MX_GPIO_Init+0xd0>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a2d      	ldr	r2, [pc, #180]	; (80003f4 <MX_GPIO_Init+0xd0>)
 800033e:	f043 0310 	orr.w	r3, r3, #16
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b2b      	ldr	r3, [pc, #172]	; (80003f4 <MX_GPIO_Init+0xd0>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0310 	and.w	r3, r3, #16
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000350:	4b28      	ldr	r3, [pc, #160]	; (80003f4 <MX_GPIO_Init+0xd0>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a27      	ldr	r2, [pc, #156]	; (80003f4 <MX_GPIO_Init+0xd0>)
 8000356:	f043 0320 	orr.w	r3, r3, #32
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b25      	ldr	r3, [pc, #148]	; (80003f4 <MX_GPIO_Init+0xd0>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0320 	and.w	r3, r3, #32
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000368:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <MX_GPIO_Init+0xd0>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <MX_GPIO_Init+0xd0>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b1f      	ldr	r3, [pc, #124]	; (80003f4 <MX_GPIO_Init+0xd0>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0308 	and.w	r3, r3, #8
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <MX_GPIO_Init+0xd0>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <MX_GPIO_Init+0xd0>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <MX_GPIO_Init+0xd0>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039e:	4816      	ldr	r0, [pc, #88]	; (80003f8 <MX_GPIO_Init+0xd4>)
 80003a0:	f000 fd17 	bl	8000dd2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD_Pin */
	GPIO_InitStruct.Pin = LD_Pin;
 80003a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	4619      	mov	r1, r3
 80003bc:	480e      	ldr	r0, [pc, #56]	; (80003f8 <MX_GPIO_Init+0xd4>)
 80003be:	f000 fb6d 	bl	8000a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_NSS_2_Pin */
	GPIO_InitStruct.Pin = SPI_NSS_2_Pin;
 80003c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_GPIO_Init+0xd8>)
 80003ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI_NSS_2_GPIO_Port, &GPIO_InitStruct);
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	4619      	mov	r1, r3
 80003d6:	480a      	ldr	r0, [pc, #40]	; (8000400 <MX_GPIO_Init+0xdc>)
 80003d8:	f000 fb60 	bl	8000a9c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003dc:	2200      	movs	r2, #0
 80003de:	2100      	movs	r1, #0
 80003e0:	2028      	movs	r0, #40	; 0x28
 80003e2:	f000 fa58 	bl	8000896 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003e6:	2028      	movs	r0, #40	; 0x28
 80003e8:	f000 fa71 	bl	80008ce <HAL_NVIC_EnableIRQ>

}
 80003ec:	bf00      	nop
 80003ee:	3720      	adds	r7, #32
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40011000 	.word	0x40011000
 80003fc:	10310000 	.word	0x10310000
 8000400:	40010c00 	.word	0x40010c00

08000404 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000408:	b672      	cpsid	i
}
 800040a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800040c:	e7fe      	b.n	800040c <Error_Handler+0x8>
	...

08000410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <HAL_MspInit+0x5c>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a14      	ldr	r2, [pc, #80]	; (800046c <HAL_MspInit+0x5c>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6193      	str	r3, [r2, #24]
 8000422:	4b12      	ldr	r3, [pc, #72]	; (800046c <HAL_MspInit+0x5c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <HAL_MspInit+0x5c>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	4a0e      	ldr	r2, [pc, #56]	; (800046c <HAL_MspInit+0x5c>)
 8000434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000438:	61d3      	str	r3, [r2, #28]
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <HAL_MspInit+0x5c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <HAL_MspInit+0x60>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <HAL_MspInit+0x60>)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000
 8000470:	40010000 	.word	0x40010000

08000474 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a09      	ldr	r2, [pc, #36]	; (80004a8 <HAL_CRC_MspInit+0x34>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d10b      	bne.n	800049e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <HAL_CRC_MspInit+0x38>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a08      	ldr	r2, [pc, #32]	; (80004ac <HAL_CRC_MspInit+0x38>)
 800048c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <HAL_CRC_MspInit+0x38>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40023000 	.word	0x40023000
 80004ac:	40021000 	.word	0x40021000

080004b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a20      	ldr	r2, [pc, #128]	; (800054c <HAL_SPI_MspInit+0x9c>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d139      	bne.n	8000544 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004d0:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <HAL_SPI_MspInit+0xa0>)
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	4a1e      	ldr	r2, [pc, #120]	; (8000550 <HAL_SPI_MspInit+0xa0>)
 80004d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004da:	61d3      	str	r3, [r2, #28]
 80004dc:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <HAL_SPI_MspInit+0xa0>)
 80004de:	69db      	ldr	r3, [r3, #28]
 80004e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e8:	4b19      	ldr	r3, [pc, #100]	; (8000550 <HAL_SPI_MspInit+0xa0>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a18      	ldr	r2, [pc, #96]	; (8000550 <HAL_SPI_MspInit+0xa0>)
 80004ee:	f043 0308 	orr.w	r3, r3, #8
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <HAL_SPI_MspInit+0xa0>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0308 	and.w	r3, r3, #8
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000500:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	480f      	ldr	r0, [pc, #60]	; (8000554 <HAL_SPI_MspInit+0xa4>)
 8000516:	f000 fac1 	bl	8000a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800051a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800051e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2302      	movs	r3, #2
 8000522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000524:	2303      	movs	r3, #3
 8000526:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	4809      	ldr	r0, [pc, #36]	; (8000554 <HAL_SPI_MspInit+0xa4>)
 8000530:	f000 fab4 	bl	8000a9c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	2024      	movs	r0, #36	; 0x24
 800053a:	f000 f9ac 	bl	8000896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800053e:	2024      	movs	r0, #36	; 0x24
 8000540:	f000 f9c5 	bl	80008ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40003800 	.word	0x40003800
 8000550:	40021000 	.word	0x40021000
 8000554:	40010c00 	.word	0x40010c00

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800055c:	e7fe      	b.n	800055c <NMI_Handler+0x4>

0800055e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <MemManage_Handler+0x4>

0800056a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <UsageFault_Handler+0x4>

08000576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059e:	f000 f887 	bl	80006b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <SPI2_IRQHandler+0x10>)
 80005ae:	f001 fa41 	bl	8001a34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000030 	.word	0x20000030

080005bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI_NSS_2_Pin);
 80005c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80005c4:	f000 fc1e 	bl	8000e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}

080005cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005da:	490d      	ldr	r1, [pc, #52]	; (8000610 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005f0:	4c0a      	ldr	r4, [pc, #40]	; (800061c <LoopFillZerobss+0x22>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005fe:	f7ff ffe5 	bl	80005cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000602:	f001 fe21 	bl	8002248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000606:	f7ff fdd7 	bl	80001b8 <main>
  bx lr
 800060a:	4770      	bx	lr
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000614:	080022e0 	.word	0x080022e0
  ldr r2, =_sbss
 8000618:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800061c:	200000c0 	.word	0x200000c0

08000620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC1_2_IRQHandler>
	...

08000624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <HAL_Init+0x28>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_Init+0x28>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000634:	2003      	movs	r0, #3
 8000636:	f000 f923 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800063a:	200f      	movs	r0, #15
 800063c:	f000 f808 	bl	8000650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000640:	f7ff fee6 	bl	8000410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022000 	.word	0x40022000

08000650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_InitTick+0x54>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_InitTick+0x58>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	fbb3 f3f1 	udiv	r3, r3, r1
 800066a:	fbb2 f3f3 	udiv	r3, r2, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f93b 	bl	80008ea <HAL_SYSTICK_Config>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800067a:	2301      	movs	r3, #1
 800067c:	e00e      	b.n	800069c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b0f      	cmp	r3, #15
 8000682:	d80a      	bhi.n	800069a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000684:	2200      	movs	r2, #0
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	f04f 30ff 	mov.w	r0, #4294967295
 800068c:	f000 f903 	bl	8000896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <HAL_InitTick+0x5c>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000696:	2300      	movs	r3, #0
 8000698:	e000      	b.n	800069c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000004 	.word	0x20000004

080006b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <HAL_IncTick+0x1c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_IncTick+0x20>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	4a03      	ldr	r2, [pc, #12]	; (80006d0 <HAL_IncTick+0x20>)
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	20000008 	.word	0x20000008
 80006d0:	200000bc 	.word	0x200000bc

080006d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return uwTick;
 80006d8:	4b02      	ldr	r3, [pc, #8]	; (80006e4 <HAL_GetTick+0x10>)
 80006da:	681b      	ldr	r3, [r3, #0]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	200000bc 	.word	0x200000bc

080006e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	60d3      	str	r3, [r2, #12]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <__NVIC_GetPriorityGrouping+0x18>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	f003 0307 	and.w	r3, r3, #7
}
 800073e:	4618      	mov	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	2b00      	cmp	r3, #0
 800075c:	db0b      	blt.n	8000776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f003 021f 	and.w	r2, r3, #31
 8000764:	4906      	ldr	r1, [pc, #24]	; (8000780 <__NVIC_EnableIRQ+0x34>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	095b      	lsrs	r3, r3, #5
 800076c:	2001      	movs	r0, #1
 800076e:	fa00 f202 	lsl.w	r2, r0, r2
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	e000e100 	.word	0xe000e100

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db0a      	blt.n	80007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <__NVIC_SetPriority+0x4c>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ac:	e00a      	b.n	80007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <__NVIC_SetPriority+0x50>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	3b04      	subs	r3, #4
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	440b      	add	r3, r1
 80007c2:	761a      	strb	r2, [r3, #24]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f1c3 0307 	rsb	r3, r3, #7
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	bf28      	it	cs
 80007f6:	2304      	movcs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d902      	bls.n	8000808 <NVIC_EncodePriority+0x30>
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3b03      	subs	r3, #3
 8000806:	e000      	b.n	800080a <NVIC_EncodePriority+0x32>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43d9      	mvns	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4313      	orrs	r3, r2
         );
}
 8000832:	4618      	mov	r0, r3
 8000834:	3724      	adds	r7, #36	; 0x24
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	210f      	movs	r1, #15
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f7ff ff90 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff2d 	bl	80006e8 <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff42 	bl	8000730 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff90 	bl	80007d8 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5f 	bl	8000784 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff35 	bl	800074c <__NVIC_EnableIRQ>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffa2 	bl	800083c <SysTick_Config>
 80008f8:	4603      	mov	r3, r0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d101      	bne.n	8000914 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	e00e      	b.n	8000932 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	795b      	ldrb	r3, [r3, #5]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d105      	bne.n	800092a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fda5 	bl	8000474 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2201      	movs	r2, #1
 800092e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800093a:	b480      	push	{r7}
 800093c:	b085      	sub	sp, #20
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800094c:	2b02      	cmp	r3, #2
 800094e:	d008      	beq.n	8000962 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2204      	movs	r2, #4
 8000954:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e020      	b.n	80009a4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f022 020e 	bic.w	r2, r2, #14
 8000970:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f022 0201 	bic.w	r2, r2, #1
 8000980:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800098a:	2101      	movs	r1, #1
 800098c:	fa01 f202 	lsl.w	r2, r1, r2
 8000990:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2201      	movs	r2, #1
 8000996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
	...

080009b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d005      	beq.n	80009d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2204      	movs	r2, #4
 80009ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	e051      	b.n	8000a76 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f022 020e 	bic.w	r2, r2, #14
 80009e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f022 0201 	bic.w	r2, r2, #1
 80009f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a22      	ldr	r2, [pc, #136]	; (8000a80 <HAL_DMA_Abort_IT+0xd0>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d029      	beq.n	8000a50 <HAL_DMA_Abort_IT+0xa0>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a20      	ldr	r2, [pc, #128]	; (8000a84 <HAL_DMA_Abort_IT+0xd4>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d022      	beq.n	8000a4c <HAL_DMA_Abort_IT+0x9c>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <HAL_DMA_Abort_IT+0xd8>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d01a      	beq.n	8000a46 <HAL_DMA_Abort_IT+0x96>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <HAL_DMA_Abort_IT+0xdc>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d012      	beq.n	8000a40 <HAL_DMA_Abort_IT+0x90>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <HAL_DMA_Abort_IT+0xe0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d00a      	beq.n	8000a3a <HAL_DMA_Abort_IT+0x8a>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a1a      	ldr	r2, [pc, #104]	; (8000a94 <HAL_DMA_Abort_IT+0xe4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d102      	bne.n	8000a34 <HAL_DMA_Abort_IT+0x84>
 8000a2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a32:	e00e      	b.n	8000a52 <HAL_DMA_Abort_IT+0xa2>
 8000a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a38:	e00b      	b.n	8000a52 <HAL_DMA_Abort_IT+0xa2>
 8000a3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3e:	e008      	b.n	8000a52 <HAL_DMA_Abort_IT+0xa2>
 8000a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a44:	e005      	b.n	8000a52 <HAL_DMA_Abort_IT+0xa2>
 8000a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a4a:	e002      	b.n	8000a52 <HAL_DMA_Abort_IT+0xa2>
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	e000      	b.n	8000a52 <HAL_DMA_Abort_IT+0xa2>
 8000a50:	2301      	movs	r3, #1
 8000a52:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <HAL_DMA_Abort_IT+0xe8>)
 8000a54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	4798      	blx	r3
    } 
  }
  return status;
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40020008 	.word	0x40020008
 8000a84:	4002001c 	.word	0x4002001c
 8000a88:	40020030 	.word	0x40020030
 8000a8c:	40020044 	.word	0x40020044
 8000a90:	40020058 	.word	0x40020058
 8000a94:	4002006c 	.word	0x4002006c
 8000a98:	40020000 	.word	0x40020000

08000a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b08b      	sub	sp, #44	; 0x2c
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aae:	e169      	b.n	8000d84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	f040 8158 	bne.w	8000d7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	4a9a      	ldr	r2, [pc, #616]	; (8000d3c <HAL_GPIO_Init+0x2a0>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d05e      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000ad8:	4a98      	ldr	r2, [pc, #608]	; (8000d3c <HAL_GPIO_Init+0x2a0>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d875      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000ade:	4a98      	ldr	r2, [pc, #608]	; (8000d40 <HAL_GPIO_Init+0x2a4>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d058      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000ae4:	4a96      	ldr	r2, [pc, #600]	; (8000d40 <HAL_GPIO_Init+0x2a4>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d86f      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000aea:	4a96      	ldr	r2, [pc, #600]	; (8000d44 <HAL_GPIO_Init+0x2a8>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d052      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000af0:	4a94      	ldr	r2, [pc, #592]	; (8000d44 <HAL_GPIO_Init+0x2a8>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d869      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000af6:	4a94      	ldr	r2, [pc, #592]	; (8000d48 <HAL_GPIO_Init+0x2ac>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d04c      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000afc:	4a92      	ldr	r2, [pc, #584]	; (8000d48 <HAL_GPIO_Init+0x2ac>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d863      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000b02:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <HAL_GPIO_Init+0x2b0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d046      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000b08:	4a90      	ldr	r2, [pc, #576]	; (8000d4c <HAL_GPIO_Init+0x2b0>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d85d      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000b0e:	2b12      	cmp	r3, #18
 8000b10:	d82a      	bhi.n	8000b68 <HAL_GPIO_Init+0xcc>
 8000b12:	2b12      	cmp	r3, #18
 8000b14:	d859      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000b16:	a201      	add	r2, pc, #4	; (adr r2, 8000b1c <HAL_GPIO_Init+0x80>)
 8000b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1c:	08000b97 	.word	0x08000b97
 8000b20:	08000b71 	.word	0x08000b71
 8000b24:	08000b83 	.word	0x08000b83
 8000b28:	08000bc5 	.word	0x08000bc5
 8000b2c:	08000bcb 	.word	0x08000bcb
 8000b30:	08000bcb 	.word	0x08000bcb
 8000b34:	08000bcb 	.word	0x08000bcb
 8000b38:	08000bcb 	.word	0x08000bcb
 8000b3c:	08000bcb 	.word	0x08000bcb
 8000b40:	08000bcb 	.word	0x08000bcb
 8000b44:	08000bcb 	.word	0x08000bcb
 8000b48:	08000bcb 	.word	0x08000bcb
 8000b4c:	08000bcb 	.word	0x08000bcb
 8000b50:	08000bcb 	.word	0x08000bcb
 8000b54:	08000bcb 	.word	0x08000bcb
 8000b58:	08000bcb 	.word	0x08000bcb
 8000b5c:	08000bcb 	.word	0x08000bcb
 8000b60:	08000b79 	.word	0x08000b79
 8000b64:	08000b8d 	.word	0x08000b8d
 8000b68:	4a79      	ldr	r2, [pc, #484]	; (8000d50 <HAL_GPIO_Init+0x2b4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d013      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b6e:	e02c      	b.n	8000bca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	623b      	str	r3, [r7, #32]
          break;
 8000b76:	e029      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	623b      	str	r3, [r7, #32]
          break;
 8000b80:	e024      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	3308      	adds	r3, #8
 8000b88:	623b      	str	r3, [r7, #32]
          break;
 8000b8a:	e01f      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	330c      	adds	r3, #12
 8000b92:	623b      	str	r3, [r7, #32]
          break;
 8000b94:	e01a      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	623b      	str	r3, [r7, #32]
          break;
 8000ba2:	e013      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d105      	bne.n	8000bb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bac:	2308      	movs	r3, #8
 8000bae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	611a      	str	r2, [r3, #16]
          break;
 8000bb6:	e009      	b.n	8000bcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	69fa      	ldr	r2, [r7, #28]
 8000bc0:	615a      	str	r2, [r3, #20]
          break;
 8000bc2:	e003      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
          break;
 8000bc8:	e000      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          break;
 8000bca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	2bff      	cmp	r3, #255	; 0xff
 8000bd0:	d801      	bhi.n	8000bd6 <HAL_GPIO_Init+0x13a>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	e001      	b.n	8000bda <HAL_GPIO_Init+0x13e>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	2bff      	cmp	r3, #255	; 0xff
 8000be0:	d802      	bhi.n	8000be8 <HAL_GPIO_Init+0x14c>
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	e002      	b.n	8000bee <HAL_GPIO_Init+0x152>
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	3b08      	subs	r3, #8
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	210f      	movs	r1, #15
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	401a      	ands	r2, r3
 8000c00:	6a39      	ldr	r1, [r7, #32]
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 80b1 	beq.w	8000d7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c1c:	4b4d      	ldr	r3, [pc, #308]	; (8000d54 <HAL_GPIO_Init+0x2b8>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a4c      	ldr	r2, [pc, #304]	; (8000d54 <HAL_GPIO_Init+0x2b8>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <HAL_GPIO_Init+0x2b8>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c34:	4a48      	ldr	r2, [pc, #288]	; (8000d58 <HAL_GPIO_Init+0x2bc>)
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	220f      	movs	r2, #15
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a40      	ldr	r2, [pc, #256]	; (8000d5c <HAL_GPIO_Init+0x2c0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d013      	beq.n	8000c88 <HAL_GPIO_Init+0x1ec>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a3f      	ldr	r2, [pc, #252]	; (8000d60 <HAL_GPIO_Init+0x2c4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d00d      	beq.n	8000c84 <HAL_GPIO_Init+0x1e8>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a3e      	ldr	r2, [pc, #248]	; (8000d64 <HAL_GPIO_Init+0x2c8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d007      	beq.n	8000c80 <HAL_GPIO_Init+0x1e4>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a3d      	ldr	r2, [pc, #244]	; (8000d68 <HAL_GPIO_Init+0x2cc>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d101      	bne.n	8000c7c <HAL_GPIO_Init+0x1e0>
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e006      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	e004      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	4093      	lsls	r3, r2
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c9a:	492f      	ldr	r1, [pc, #188]	; (8000d58 <HAL_GPIO_Init+0x2bc>)
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d006      	beq.n	8000cc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	492c      	ldr	r1, [pc, #176]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
 8000cc0:	e006      	b.n	8000cd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	4928      	ldr	r1, [pc, #160]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000ccc:	4013      	ands	r3, r2
 8000cce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d006      	beq.n	8000cea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cdc:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	4922      	ldr	r1, [pc, #136]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	604b      	str	r3, [r1, #4]
 8000ce8:	e006      	b.n	8000cf8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	491e      	ldr	r1, [pc, #120]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d006      	beq.n	8000d12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	4918      	ldr	r1, [pc, #96]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	608b      	str	r3, [r1, #8]
 8000d10:	e006      	b.n	8000d20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	4914      	ldr	r1, [pc, #80]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d021      	beq.n	8000d70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	490e      	ldr	r1, [pc, #56]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	60cb      	str	r3, [r1, #12]
 8000d38:	e021      	b.n	8000d7e <HAL_GPIO_Init+0x2e2>
 8000d3a:	bf00      	nop
 8000d3c:	10320000 	.word	0x10320000
 8000d40:	10310000 	.word	0x10310000
 8000d44:	10220000 	.word	0x10220000
 8000d48:	10210000 	.word	0x10210000
 8000d4c:	10120000 	.word	0x10120000
 8000d50:	10110000 	.word	0x10110000
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	40010800 	.word	0x40010800
 8000d60:	40010c00 	.word	0x40010c00
 8000d64:	40011000 	.word	0x40011000
 8000d68:	40011400 	.word	0x40011400
 8000d6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_GPIO_Init+0x304>)
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	4909      	ldr	r1, [pc, #36]	; (8000da0 <HAL_GPIO_Init+0x304>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	3301      	adds	r3, #1
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f47f ae8e 	bne.w	8000ab0 <HAL_GPIO_Init+0x14>
  }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	372c      	adds	r7, #44	; 0x2c
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	40010400 	.word	0x40010400

08000da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	4013      	ands	r3, r2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d002      	beq.n	8000dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e001      	b.n	8000dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	807b      	strh	r3, [r7, #2]
 8000dde:	4613      	mov	r3, r2
 8000de0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000de2:	787b      	ldrb	r3, [r7, #1]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000de8:	887a      	ldrh	r2, [r7, #2]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dee:	e003      	b.n	8000df8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	041a      	lsls	r2, r3, #16
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	611a      	str	r2, [r3, #16]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
	...

08000e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e10:	695a      	ldr	r2, [r3, #20]
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	4013      	ands	r3, r2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d006      	beq.n	8000e28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff f992 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e272      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 8087 	beq.w	8000f62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e54:	4b92      	ldr	r3, [pc, #584]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d00c      	beq.n	8000e7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e60:	4b8f      	ldr	r3, [pc, #572]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	2b08      	cmp	r3, #8
 8000e6a:	d112      	bne.n	8000e92 <HAL_RCC_OscConfig+0x5e>
 8000e6c:	4b8c      	ldr	r3, [pc, #560]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e78:	d10b      	bne.n	8000e92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7a:	4b89      	ldr	r3, [pc, #548]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d06c      	beq.n	8000f60 <HAL_RCC_OscConfig+0x12c>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d168      	bne.n	8000f60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e24c      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e9a:	d106      	bne.n	8000eaa <HAL_RCC_OscConfig+0x76>
 8000e9c:	4b80      	ldr	r3, [pc, #512]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a7f      	ldr	r2, [pc, #508]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	e02e      	b.n	8000f08 <HAL_RCC_OscConfig+0xd4>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10c      	bne.n	8000ecc <HAL_RCC_OscConfig+0x98>
 8000eb2:	4b7b      	ldr	r3, [pc, #492]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a7a      	ldr	r2, [pc, #488]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b78      	ldr	r3, [pc, #480]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a77      	ldr	r2, [pc, #476]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e01d      	b.n	8000f08 <HAL_RCC_OscConfig+0xd4>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0xbc>
 8000ed6:	4b72      	ldr	r3, [pc, #456]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a71      	ldr	r2, [pc, #452]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b6f      	ldr	r3, [pc, #444]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a6e      	ldr	r2, [pc, #440]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e00b      	b.n	8000f08 <HAL_RCC_OscConfig+0xd4>
 8000ef0:	4b6b      	ldr	r3, [pc, #428]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a6a      	ldr	r2, [pc, #424]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b68      	ldr	r3, [pc, #416]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a67      	ldr	r2, [pc, #412]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d013      	beq.n	8000f38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fbe0 	bl	80006d4 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fbdc 	bl	80006d4 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	; 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e200      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2a:	4b5d      	ldr	r3, [pc, #372]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0xe4>
 8000f36:	e014      	b.n	8000f62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fbcc 	bl	80006d4 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fbc8 	bl	80006d4 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e1ec      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	4b53      	ldr	r3, [pc, #332]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x10c>
 8000f5e:	e000      	b.n	8000f62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d063      	beq.n	8001036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f6e:	4b4c      	ldr	r3, [pc, #304]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00b      	beq.n	8000f92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f7a:	4b49      	ldr	r3, [pc, #292]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	2b08      	cmp	r3, #8
 8000f84:	d11c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x18c>
 8000f86:	4b46      	ldr	r3, [pc, #280]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d116      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f92:	4b43      	ldr	r3, [pc, #268]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <HAL_RCC_OscConfig+0x176>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d001      	beq.n	8000faa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e1c0      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000faa:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4939      	ldr	r1, [pc, #228]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fbe:	e03a      	b.n	8001036 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d020      	beq.n	800100a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc8:	4b36      	ldr	r3, [pc, #216]	; (80010a4 <HAL_RCC_OscConfig+0x270>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fce:	f7ff fb81 	bl	80006d4 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fb7d 	bl	80006d4 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e1a1      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4927      	ldr	r1, [pc, #156]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8001004:	4313      	orrs	r3, r2
 8001006:	600b      	str	r3, [r1, #0]
 8001008:	e015      	b.n	8001036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <HAL_RCC_OscConfig+0x270>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fb60 	bl	80006d4 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001018:	f7ff fb5c 	bl	80006d4 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e180      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	2b00      	cmp	r3, #0
 8001040:	d03a      	beq.n	80010b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d019      	beq.n	800107e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <HAL_RCC_OscConfig+0x274>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001050:	f7ff fb40 	bl	80006d4 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001058:	f7ff fb3c 	bl	80006d4 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e160      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <HAL_RCC_OscConfig+0x26c>)
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001076:	2001      	movs	r0, #1
 8001078:	f000 faa6 	bl	80015c8 <RCC_Delay>
 800107c:	e01c      	b.n	80010b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_RCC_OscConfig+0x274>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001084:	f7ff fb26 	bl	80006d4 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800108a:	e00f      	b.n	80010ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800108c:	f7ff fb22 	bl	80006d4 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d908      	bls.n	80010ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e146      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	42420000 	.word	0x42420000
 80010a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ac:	4b92      	ldr	r3, [pc, #584]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e9      	bne.n	800108c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 80a6 	beq.w	8001212 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ca:	4b8b      	ldr	r3, [pc, #556]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10d      	bne.n	80010f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b88      	ldr	r3, [pc, #544]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a87      	ldr	r2, [pc, #540]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b85      	ldr	r3, [pc, #532]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ee:	2301      	movs	r3, #1
 80010f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f2:	4b82      	ldr	r3, [pc, #520]	; (80012fc <HAL_RCC_OscConfig+0x4c8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d118      	bne.n	8001130 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010fe:	4b7f      	ldr	r3, [pc, #508]	; (80012fc <HAL_RCC_OscConfig+0x4c8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a7e      	ldr	r2, [pc, #504]	; (80012fc <HAL_RCC_OscConfig+0x4c8>)
 8001104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800110a:	f7ff fae3 	bl	80006d4 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001112:	f7ff fadf 	bl	80006d4 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b64      	cmp	r3, #100	; 0x64
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e103      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001124:	4b75      	ldr	r3, [pc, #468]	; (80012fc <HAL_RCC_OscConfig+0x4c8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d106      	bne.n	8001146 <HAL_RCC_OscConfig+0x312>
 8001138:	4b6f      	ldr	r3, [pc, #444]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	4a6e      	ldr	r2, [pc, #440]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6213      	str	r3, [r2, #32]
 8001144:	e02d      	b.n	80011a2 <HAL_RCC_OscConfig+0x36e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0x334>
 800114e:	4b6a      	ldr	r3, [pc, #424]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	4a69      	ldr	r2, [pc, #420]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	6213      	str	r3, [r2, #32]
 800115a:	4b67      	ldr	r3, [pc, #412]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	4a66      	ldr	r2, [pc, #408]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	f023 0304 	bic.w	r3, r3, #4
 8001164:	6213      	str	r3, [r2, #32]
 8001166:	e01c      	b.n	80011a2 <HAL_RCC_OscConfig+0x36e>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	2b05      	cmp	r3, #5
 800116e:	d10c      	bne.n	800118a <HAL_RCC_OscConfig+0x356>
 8001170:	4b61      	ldr	r3, [pc, #388]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	4a60      	ldr	r2, [pc, #384]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6213      	str	r3, [r2, #32]
 800117c:	4b5e      	ldr	r3, [pc, #376]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4a5d      	ldr	r2, [pc, #372]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6213      	str	r3, [r2, #32]
 8001188:	e00b      	b.n	80011a2 <HAL_RCC_OscConfig+0x36e>
 800118a:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a5a      	ldr	r2, [pc, #360]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6213      	str	r3, [r2, #32]
 8001196:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a57      	ldr	r2, [pc, #348]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	f023 0304 	bic.w	r3, r3, #4
 80011a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d015      	beq.n	80011d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011aa:	f7ff fa93 	bl	80006d4 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b0:	e00a      	b.n	80011c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b2:	f7ff fa8f 	bl	80006d4 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e0b1      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c8:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0ee      	beq.n	80011b2 <HAL_RCC_OscConfig+0x37e>
 80011d4:	e014      	b.n	8001200 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fa7d 	bl	80006d4 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011dc:	e00a      	b.n	80011f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011de:	f7ff fa79 	bl	80006d4 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e09b      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f4:	4b40      	ldr	r3, [pc, #256]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1ee      	bne.n	80011de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d105      	bne.n	8001212 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001206:	4b3c      	ldr	r3, [pc, #240]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a3b      	ldr	r2, [pc, #236]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001210:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8087 	beq.w	800132a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b08      	cmp	r3, #8
 8001226:	d061      	beq.n	80012ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d146      	bne.n	80012be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001230:	4b33      	ldr	r3, [pc, #204]	; (8001300 <HAL_RCC_OscConfig+0x4cc>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff fa4d 	bl	80006d4 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800123e:	f7ff fa49 	bl	80006d4 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e06d      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f0      	bne.n	800123e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001264:	d108      	bne.n	8001278 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	4921      	ldr	r1, [pc, #132]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a19      	ldr	r1, [r3, #32]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	430b      	orrs	r3, r1
 800128a:	491b      	ldr	r1, [pc, #108]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_RCC_OscConfig+0x4cc>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fa1d 	bl	80006d4 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129e:	f7ff fa19 	bl	80006d4 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e03d      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x46a>
 80012bc:	e035      	b.n	800132a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_RCC_OscConfig+0x4cc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fa06 	bl	80006d4 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012cc:	f7ff fa02 	bl	80006d4 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e026      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x498>
 80012ea:	e01e      	b.n	800132a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d107      	bne.n	8001304 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e019      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40007000 	.word	0x40007000
 8001300:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_RCC_OscConfig+0x500>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	429a      	cmp	r2, r3
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001322:	429a      	cmp	r2, r3
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e0d0      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800134c:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d910      	bls.n	800137c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135a:	4b67      	ldr	r3, [pc, #412]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 0207 	bic.w	r2, r3, #7
 8001362:	4965      	ldr	r1, [pc, #404]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800136a:	4b63      	ldr	r3, [pc, #396]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d001      	beq.n	800137c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e0b8      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d020      	beq.n	80013ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001394:	4b59      	ldr	r3, [pc, #356]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4a58      	ldr	r2, [pc, #352]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800139e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ac:	4b53      	ldr	r3, [pc, #332]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a52      	ldr	r2, [pc, #328]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b8:	4b50      	ldr	r3, [pc, #320]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	494d      	ldr	r1, [pc, #308]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d040      	beq.n	8001458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d115      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e07f      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d107      	bne.n	8001406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d109      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e073      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e06b      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001416:	4b39      	ldr	r3, [pc, #228]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f023 0203 	bic.w	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4936      	ldr	r1, [pc, #216]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001428:	f7ff f954 	bl	80006d4 <HAL_GetTick>
 800142c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	e00a      	b.n	8001446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001430:	f7ff f950 	bl	80006d4 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	; 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e053      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 020c 	and.w	r2, r3, #12
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	429a      	cmp	r2, r3
 8001456:	d1eb      	bne.n	8001430 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d210      	bcs.n	8001488 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 0207 	bic.w	r2, r3, #7
 800146e:	4922      	ldr	r1, [pc, #136]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e032      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	4916      	ldr	r1, [pc, #88]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	490e      	ldr	r1, [pc, #56]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014c6:	f000 f821 	bl	800150c <HAL_RCC_GetSysClockFreq>
 80014ca:	4602      	mov	r2, r0
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	490a      	ldr	r1, [pc, #40]	; (8001500 <HAL_RCC_ClockConfig+0x1c8>)
 80014d8:	5ccb      	ldrb	r3, [r1, r3]
 80014da:	fa22 f303 	lsr.w	r3, r2, r3
 80014de:	4a09      	ldr	r2, [pc, #36]	; (8001504 <HAL_RCC_ClockConfig+0x1cc>)
 80014e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_RCC_ClockConfig+0x1d0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f8b2 	bl	8000650 <HAL_InitTick>

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40022000 	.word	0x40022000
 80014fc:	40021000 	.word	0x40021000
 8001500:	080022c8 	.word	0x080022c8
 8001504:	20000000 	.word	0x20000000
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800150c:	b490      	push	{r4, r7}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001514:	1d3c      	adds	r4, r7, #4
 8001516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800151c:	f240 2301 	movw	r3, #513	; 0x201
 8001520:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b04      	cmp	r3, #4
 8001544:	d002      	beq.n	800154c <HAL_RCC_GetSysClockFreq+0x40>
 8001546:	2b08      	cmp	r3, #8
 8001548:	d003      	beq.n	8001552 <HAL_RCC_GetSysClockFreq+0x46>
 800154a:	e02b      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800154e:	623b      	str	r3, [r7, #32]
      break;
 8001550:	e02b      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	0c9b      	lsrs	r3, r3, #18
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3328      	adds	r3, #40	; 0x28
 800155c:	443b      	add	r3, r7
 800155e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001562:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d012      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	0c5b      	lsrs	r3, r3, #17
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	3328      	adds	r3, #40	; 0x28
 800157a:	443b      	add	r3, r7
 800157c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001580:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001586:	fb03 f202 	mul.w	r2, r3, r2
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
 8001592:	e004      	b.n	800159e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001598:	fb02 f303 	mul.w	r3, r2, r3
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	623b      	str	r3, [r7, #32]
      break;
 80015a2:	e002      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015a6:	623b      	str	r3, [r7, #32]
      break;
 80015a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015aa:	6a3b      	ldr	r3, [r7, #32]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc90      	pop	{r4, r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	080022b8 	.word	0x080022b8
 80015bc:	40021000 	.word	0x40021000
 80015c0:	007a1200 	.word	0x007a1200
 80015c4:	003d0900 	.word	0x003d0900

080015c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <RCC_Delay+0x34>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <RCC_Delay+0x38>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	0a5b      	lsrs	r3, r3, #9
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015e4:	bf00      	nop
  }
  while (Delay --);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	60fa      	str	r2, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f9      	bne.n	80015e4 <RCC_Delay+0x1c>
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	20000000 	.word	0x20000000
 8001600:	10624dd3 	.word	0x10624dd3

08001604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e07e      	b.n	8001714 <HAL_SPI_Init+0x110>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	2b00      	cmp	r3, #0
 800161c:	d108      	bne.n	8001630 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001626:	d009      	beq.n	800163c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
 800162e:	e005      	b.n	800163c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d106      	bne.n	8001656 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7fe ff2d 	bl	80004b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2202      	movs	r2, #2
 800165a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800166c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ba:	ea42 0103 	orr.w	r1, r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	0c1a      	lsrs	r2, r3, #16
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f002 0204 	and.w	r2, r2, #4
 80016dc:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016e6:	d105      	bne.n	80016f4 <HAL_SPI_Init+0xf0>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b292      	uxth	r2, r2
 80016f2:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	69da      	ldr	r2, [r3, #28]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001702:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <HAL_SPI_TransmitReceive_IT+0x20>
 8001738:	2302      	movs	r3, #2
 800173a:	e08a      	b.n	8001852 <HAL_SPI_TransmitReceive_IT+0x136>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800174a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001752:	7dbb      	ldrb	r3, [r7, #22]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d00d      	beq.n	8001774 <HAL_SPI_TransmitReceive_IT+0x58>
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800175e:	d106      	bne.n	800176e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <HAL_SPI_TransmitReceive_IT+0x52>
 8001768:	7dbb      	ldrb	r3, [r7, #22]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d002      	beq.n	8001774 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800176e:	2302      	movs	r3, #2
 8001770:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001772:	e069      	b.n	8001848 <HAL_SPI_TransmitReceive_IT+0x12c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_SPI_TransmitReceive_IT+0x6a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <HAL_SPI_TransmitReceive_IT+0x6a>
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	75fb      	strb	r3, [r7, #23]
    goto error;
 800178a:	e05d      	b.n	8001848 <HAL_SPI_TransmitReceive_IT+0x12c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b04      	cmp	r3, #4
 8001796:	d003      	beq.n	80017a0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2205      	movs	r2, #5
 800179c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	887a      	ldrh	r2, [r7, #2]
 80017b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	887a      	ldrh	r2, [r7, #2]
 80017c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	887a      	ldrh	r2, [r7, #2]
 80017c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4a21      	ldr	r2, [pc, #132]	; (800185c <HAL_SPI_TransmitReceive_IT+0x140>)
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4a21      	ldr	r2, [pc, #132]	; (8001860 <HAL_SPI_TransmitReceive_IT+0x144>)
 80017dc:	645a      	str	r2, [r3, #68]	; 0x44
 80017de:	e005      	b.n	80017ec <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4a20      	ldr	r2, [pc, #128]	; (8001864 <HAL_SPI_TransmitReceive_IT+0x148>)
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80017ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f4:	d10f      	bne.n	8001816 <HAL_SPI_TransmitReceive_IT+0xfa>
  {
    SPI_RESET_CRC(hspi);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001814:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8001824:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001830:	2b40      	cmp	r3, #64	; 0x40
 8001832:	d008      	beq.n	8001846 <HAL_SPI_TransmitReceive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e000      	b.n	8001848 <HAL_SPI_TransmitReceive_IT+0x12c>
  }

error :
 8001846:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001850:	7dfb      	ldrb	r3, [r7, #23]
}
 8001852:	4618      	mov	r0, r3
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	08001da9 	.word	0x08001da9
 8001860:	08001e51 	.word	0x08001e51
 8001864:	08001c61 	.word	0x08001c61
 8001868:	08001d1f 	.word	0x08001d1f

0800186c <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	75fb      	strb	r3, [r7, #23]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_SPI_Abort+0x1b8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a6a      	ldr	r2, [pc, #424]	; (8001a28 <HAL_SPI_Abort+0x1bc>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0a5b      	lsrs	r3, r3, #9
 8001884:	2264      	movs	r2, #100	; 0x64
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	60fb      	str	r3, [r7, #12]
  count = resetcount;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	613b      	str	r3, [r7, #16]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0220 	bic.w	r2, r2, #32
 800189e:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d017      	beq.n	80018de <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a5e      	ldr	r2, [pc, #376]	; (8001a2c <HAL_SPI_Abort+0x1c0>)
 80018b2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d106      	bne.n	80018c8 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80018c6:	e008      	b.n	80018da <HAL_SPI_Abort+0x6e>
      }
      count--;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	613b      	str	r3, [r7, #16]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b07      	cmp	r3, #7
 80018d8:	d1ec      	bne.n	80018b4 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	613b      	str	r3, [r7, #16]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d017      	beq.n	800191c <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a50      	ldr	r2, [pc, #320]	; (8001a30 <HAL_SPI_Abort+0x1c4>)
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d106      	bne.n	8001906 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8001904:	e008      	b.n	8001918 <HAL_SPI_Abort+0xac>
      }
      count--;
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	3b01      	subs	r3, #1
 800190a:	613b      	str	r3, [r7, #16]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b07      	cmp	r3, #7
 8001916:	d1ec      	bne.n	80018f2 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	613b      	str	r3, [r7, #16]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d02e      	beq.n	8001988 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192e:	2b00      	cmp	r3, #0
 8001930:	d02a      	beq.n	8001988 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001936:	2200      	movs	r2, #0
 8001938:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fffb 	bl	800093a <HAL_DMA_Abort>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2240      	movs	r2, #64	; 0x40
 800194e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0202 	bic.w	r2, r2, #2
 800195e:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8001972:	e009      	b.n	8001988 <HAL_SPI_Abort+0x11c>
        }
        count--;
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	3b01      	subs	r3, #1
 8001978:	613b      	str	r3, [r7, #16]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0eb      	beq.n	8001960 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d022      	beq.n	80019dc <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	2b00      	cmp	r3, #0
 800199c:	d01e      	beq.n	80019dc <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	2200      	movs	r2, #0
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe ffc5 	bl	800093a <HAL_DMA_Abort>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2240      	movs	r2, #64	; 0x40
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ca:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0201 	bic.w	r2, r2, #1
 80019da:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ec:	2b40      	cmp	r3, #64	; 0x40
 80019ee:	d102      	bne.n	80019f6 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	75fb      	strb	r3, [r7, #23]
 80019f4:	e002      	b.n	80019fc <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000000 	.word	0x20000000
 8001a28:	057619f1 	.word	0x057619f1
 8001a2c:	080021f9 	.word	0x080021f9
 8001a30:	0800216d 	.word	0x0800216d

08001a34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	099b      	lsrs	r3, r3, #6
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10f      	bne.n	8001a78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00a      	beq.n	8001a78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	099b      	lsrs	r3, r3, #6
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	4798      	blx	r3
    return;
 8001a76:	e0be      	b.n	8001bf6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00a      	beq.n	8001a9a <HAL_SPI_IRQHandler+0x66>
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	09db      	lsrs	r3, r3, #7
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	4798      	blx	r3
    return;
 8001a98:	e0ad      	b.n	8001bf6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	095b      	lsrs	r3, r3, #5
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_SPI_IRQHandler+0x80>
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80a1 	beq.w	8001bf6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 809a 	beq.w	8001bf6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d023      	beq.n	8001b16 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d011      	beq.n	8001afe <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ade:	f043 0204 	orr.w	r2, r3, #4
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	e00b      	b.n	8001b16 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]
        return;
 8001b14:	e06f      	b.n	8001bf6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	095b      	lsrs	r3, r3, #5
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d014      	beq.n	8001b4c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d04f      	beq.n	8001bf4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001b62:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d104      	bne.n	8001b80 <HAL_SPI_IRQHandler+0x14c>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d034      	beq.n	8001bea <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0203 	bic.w	r2, r2, #3
 8001b8e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d011      	beq.n	8001bbc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <HAL_SPI_IRQHandler+0x1c8>)
 8001b9e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe ff03 	bl	80009b0 <HAL_DMA_Abort_IT>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d016      	beq.n	8001bf2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <HAL_SPI_IRQHandler+0x1c8>)
 8001bca:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe feed 	bl	80009b0 <HAL_DMA_Abort_IT>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00a      	beq.n	8001bf2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001be8:	e003      	b.n	8001bf2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f81a 	bl	8001c24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001bf0:	e000      	b.n	8001bf4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8001bf2:	bf00      	nop
    return;
 8001bf4:	bf00      	nop
  }
}
 8001bf6:	3720      	adds	r7, #32
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	08001c37 	.word	0x08001c37

08001c00 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f7ff ffe7 	bl	8001c24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f103 020c 	add.w	r2, r3, #12
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	7812      	ldrb	r2, [r2, #0]
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d118      	bne.n	8001cce <SPI_2linesRxISR_8BIT+0x6e>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ca4:	d103      	bne.n	8001cae <SPI_2linesRxISR_8BIT+0x4e>
    {
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <SPI_2linesRxISR_8BIT+0x74>)
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
      return;
 8001cac:	e00f      	b.n	8001cce <SPI_2linesRxISR_8BIT+0x6e>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cbc:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d102      	bne.n	8001cce <SPI_2linesRxISR_8BIT+0x6e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f9ab 	bl	8002024 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	08001cd9 	.word	0x08001cd9

08001cd8 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	330c      	adds	r3, #12
 8001cea:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8001cf4:	7afb      	ldrb	r3, [r7, #11]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d04:	605a      	str	r2, [r3, #4]

  if (hspi->TxXferCount == 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <SPI_2linesRxISR_8BITCRC+0x3e>
  {
    SPI_CloseRxTx_ISR(hspi);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f987 	bl	8002024 <SPI_CloseRxTx_ISR>
  }
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	330c      	adds	r3, #12
 8001d30:	7812      	ldrb	r2, [r2, #0]
 8001d32:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d125      	bne.n	8001da2 <SPI_2linesTxISR_8BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d5e:	d110      	bne.n	8001d82 <SPI_2linesTxISR_8BIT+0x64>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d6e:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d7e:	605a      	str	r2, [r3, #4]
      return;
 8001d80:	e00f      	b.n	8001da2 <SPI_2linesTxISR_8BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d90:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d102      	bne.n	8001da2 <SPI_2linesTxISR_8BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f941 	bl	8002024 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dba:	b292      	uxth	r2, r2
 8001dbc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc2:	1c9a      	adds	r2, r3, #2
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d118      	bne.n	8001e12 <SPI_2linesRxISR_16BIT+0x6a>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de8:	d103      	bne.n	8001df2 <SPI_2linesRxISR_16BIT+0x4a>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <SPI_2linesRxISR_16BIT+0x70>)
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40
      return;
 8001df0:	e00f      	b.n	8001e12 <SPI_2linesRxISR_16BIT+0x6a>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e00:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <SPI_2linesRxISR_16BIT+0x6a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f909 	bl	8002024 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	08001e1d 	.word	0x08001e1d

08001e1c <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);  
 8001e30:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e40:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8ee 	bl	8002024 <SPI_CloseRxTx_ISR>
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	881a      	ldrh	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	1c9a      	adds	r2, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d125      	bne.n	8001ed2 <SPI_2linesTxISR_16BIT+0x82>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e8e:	d110      	bne.n	8001eb2 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e9e:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eae:	605a      	str	r2, [r3, #4]
      return;
 8001eb0:	e00f      	b.n	8001ed2 <SPI_2linesTxISR_16BIT+0x82>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <SPI_2linesTxISR_16BIT+0x82>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f8a9 	bl	8002024 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ee8:	f7fe fbf4 	bl	80006d4 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ef8:	f7fe fbec 	bl	80006d4 <HAL_GetTick>
 8001efc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001efe:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	015b      	lsls	r3, r3, #5
 8001f04:	0d1b      	lsrs	r3, r3, #20
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f0e:	e054      	b.n	8001fba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f16:	d050      	beq.n	8001fba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f18:	f7fe fbdc 	bl	80006d4 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d902      	bls.n	8001f2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d13d      	bne.n	8001faa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f46:	d111      	bne.n	8001f6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f50:	d004      	beq.n	8001f5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5a:	d107      	bne.n	8001f6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f74:	d10f      	bne.n	8001f96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e017      	b.n	8001fda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	bf0c      	ite	eq
 8001fca:	2301      	moveq	r3, #1
 8001fcc:	2300      	movne	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d19b      	bne.n	8001f10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f7ff ff6a 	bl	8001ed8 <SPI_WaitFlagStateUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f043 0220 	orr.w	r2, r3, #32
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e000      	b.n	800201c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800202c:	4b4d      	ldr	r3, [pc, #308]	; (8002164 <SPI_CloseRxTx_ISR+0x140>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a4d      	ldr	r2, [pc, #308]	; (8002168 <SPI_CloseRxTx_ISR+0x144>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0a5b      	lsrs	r3, r3, #9
 8002038:	2264      	movs	r2, #100	; 0x64
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002040:	f7fe fb48 	bl	80006d4 <HAL_GetTick>
 8002044:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0220 	bic.w	r2, r2, #32
 8002054:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d106      	bne.n	800206a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	f043 0220 	orr.w	r2, r3, #32
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002068:	e009      	b.n	800207e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	3b01      	subs	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0eb      	beq.n	8002056 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	2164      	movs	r1, #100	; 0x64
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ffb0 	bl	8001fe8 <SPI_EndRxTxTransaction>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	f043 0220 	orr.w	r2, r3, #32
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10a      	bne.n	80020b8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d129      	bne.n	800211a <SPI_CloseRxTx_ISR+0xf6>
  {
    /* Check if CRC error is valid or not (workaround to be applied or not) */
    if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8b3 	bl	8002232 <SPI_ISCRCErrorValid>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d11d      	bne.n	800210e <SPI_CloseRxTx_ISR+0xea>
    {
      hspi->State = HAL_SPI_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	f043 0202 	orr.w	r2, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      SPI_RESET_CRC(hspi);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002104:	601a      	str	r2, [r3, #0]

      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff fd8c 	bl	8001c24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800210c:	e026      	b.n	800215c <SPI_CloseRxTx_ISR+0x138>
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002116:	609a      	str	r2, [r3, #8]
}
 8002118:	e020      	b.n	800215c <SPI_CloseRxTx_ISR+0x138>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211e:	2b00      	cmp	r3, #0
 8002120:	d115      	bne.n	800214e <SPI_CloseRxTx_ISR+0x12a>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b04      	cmp	r3, #4
 800212c:	d107      	bne.n	800213e <SPI_CloseRxTx_ISR+0x11a>
        hspi->State = HAL_SPI_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_RxCpltCallback(hspi);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fd62 	bl	8001c00 <HAL_SPI_RxCpltCallback>
}
 800213c:	e00e      	b.n	800215c <SPI_CloseRxTx_ISR+0x138>
        hspi->State = HAL_SPI_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fd63 	bl	8001c12 <HAL_SPI_TxRxCpltCallback>
}
 800214c:	e006      	b.n	800215c <SPI_CloseRxTx_ISR+0x138>
      hspi->State = HAL_SPI_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fd64 	bl	8001c24 <HAL_SPI_ErrorCallback>
}
 800215c:	bf00      	nop
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000000 	.word	0x20000000
 8002168:	057619f1 	.word	0x057619f1

0800216c <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <SPI_AbortRx_ISR+0x84>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <SPI_AbortRx_ISR+0x88>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0a5b      	lsrs	r3, r3, #9
 8002184:	2264      	movs	r2, #100	; 0x64
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800219e:	e009      	b.n	80021b4 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0eb      	beq.n	800218c <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c2:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021d2:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 80021dc:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2207      	movs	r2, #7
 80021e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	20000000 	.word	0x20000000
 80021f4:	057619f1 	.word	0x057619f1

080021f8 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800220e:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800221e:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2207      	movs	r2, #7
 8002224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <SPI_ISCRCErrorValid>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval CRC error validity (SPI_INVALID_CRC_ERROR or SPI_VALID_CRC_ERROR).
  */
uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  }
#endif
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);

  return (SPI_VALID_CRC_ERROR);
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
	...

08002248 <__libc_init_array>:
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	2600      	movs	r6, #0
 800224c:	4d0c      	ldr	r5, [pc, #48]	; (8002280 <__libc_init_array+0x38>)
 800224e:	4c0d      	ldr	r4, [pc, #52]	; (8002284 <__libc_init_array+0x3c>)
 8002250:	1b64      	subs	r4, r4, r5
 8002252:	10a4      	asrs	r4, r4, #2
 8002254:	42a6      	cmp	r6, r4
 8002256:	d109      	bne.n	800226c <__libc_init_array+0x24>
 8002258:	f000 f822 	bl	80022a0 <_init>
 800225c:	2600      	movs	r6, #0
 800225e:	4d0a      	ldr	r5, [pc, #40]	; (8002288 <__libc_init_array+0x40>)
 8002260:	4c0a      	ldr	r4, [pc, #40]	; (800228c <__libc_init_array+0x44>)
 8002262:	1b64      	subs	r4, r4, r5
 8002264:	10a4      	asrs	r4, r4, #2
 8002266:	42a6      	cmp	r6, r4
 8002268:	d105      	bne.n	8002276 <__libc_init_array+0x2e>
 800226a:	bd70      	pop	{r4, r5, r6, pc}
 800226c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002270:	4798      	blx	r3
 8002272:	3601      	adds	r6, #1
 8002274:	e7ee      	b.n	8002254 <__libc_init_array+0xc>
 8002276:	f855 3b04 	ldr.w	r3, [r5], #4
 800227a:	4798      	blx	r3
 800227c:	3601      	adds	r6, #1
 800227e:	e7f2      	b.n	8002266 <__libc_init_array+0x1e>
 8002280:	080022d8 	.word	0x080022d8
 8002284:	080022d8 	.word	0x080022d8
 8002288:	080022d8 	.word	0x080022d8
 800228c:	080022dc 	.word	0x080022dc

08002290 <memset>:
 8002290:	4603      	mov	r3, r0
 8002292:	4402      	add	r2, r0
 8002294:	4293      	cmp	r3, r2
 8002296:	d100      	bne.n	800229a <memset+0xa>
 8002298:	4770      	bx	lr
 800229a:	f803 1b01 	strb.w	r1, [r3], #1
 800229e:	e7f9      	b.n	8002294 <memset+0x4>

080022a0 <_init>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	bf00      	nop
 80022a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a6:	bc08      	pop	{r3}
 80022a8:	469e      	mov	lr, r3
 80022aa:	4770      	bx	lr

080022ac <_fini>:
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ae:	bf00      	nop
 80022b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b2:	bc08      	pop	{r3}
 80022b4:	469e      	mov	lr, r3
 80022b6:	4770      	bx	lr
